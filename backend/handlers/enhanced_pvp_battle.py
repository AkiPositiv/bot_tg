from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.enhanced_pvp_service import EnhancedPvPService
from models.interactive_battle import BattlePhaseEnum
from config.settings import GameConstants
import asyncio

router = Router()

@router.callback_query(F.data == "interactive_pvp")
async def show_interactive_pvp_menu(callback: CallbackQuery, user, is_registered: bool):
    """Show interactive PvP menu"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    if user.current_hp < user.hp * 0.3:
        await callback.answer("‚ù§Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –±–æ—è! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 30% HP", show_alert=True)
        return
    
    menu_text = (
        f"‚öîÔ∏è <b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ PvP –±–∏—Ç–≤—ã</b>\n\n"
        f"üéØ <b>–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ä–∞–∂–µ–Ω–∏–π!</b>\n"
        f"‚Ä¢ –ü–æ—à–∞–≥–æ–≤—ã–µ –±–∏—Ç–≤—ã —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π\n"
        f"‚Ä¢ 3 —Ç–∏–ø–∞ –∞—Ç–∞–∫: –¢–æ—á–Ω—ã–π, –ú–æ—â–Ω—ã–π, –û–±—ã—á–Ω—ã–π\n"
        f"‚Ä¢ 3 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∫–ª–æ–Ω–µ–Ω–∏—è\n"
        f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤\n"
        f"‚Ä¢ 50 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π —Ö–æ–¥\n\n"
        
        f"üë§ <b>–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
        f"‚ù§Ô∏è HP: <b>{user.current_hp}/{user.hp}</b>\n"
        f"üîÆ –ú–∞–Ω–∞: <b>{user.current_mana}/{user.mana}</b>\n"
        f"‚ö° –£—Ä–æ–≤–µ–Ω—å: <b>{user.level}</b>\n\n"
        
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤:"
    )
    
    builder = InlineKeyboardBuilder()
    
    # Kingdom selection for attack
    kingdoms = {
        'north': '‚ùÑÔ∏è –°–µ–≤–µ—Ä–Ω–æ–µ',
        'west': 'üåÖ –ó–∞–ø–∞–¥–Ω–æ–µ', 
        'east': 'üå∏ –í–æ—Å—Ç–æ—á–Ω–æ–µ',
        'south': 'üî• –Æ–∂–Ω–æ–µ'
    }
    
    for kingdom_id, kingdom_name in kingdoms.items():
        if kingdom_id != user.kingdom.value:  # Can't attack own kingdom
            builder.row(InlineKeyboardButton(
                text=kingdom_name, 
                callback_data=f"pvp_select_{kingdom_id}"
            ))
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="battle_menu"))
    
    await callback.message.edit_text(menu_text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("pvp_select_"))
async def select_pvp_opponent(callback: CallbackQuery, user, is_registered: bool):
    """Select PvP opponent from kingdom"""
    target_kingdom = callback.data.replace("pvp_select_", "")
    
    # Get online players from target kingdom (simplified)
    from config.database import AsyncSessionLocal
    from models.user import User
    from sqlalchemy import select, and_
    
    async with AsyncSessionLocal() as session:
        min_level = max(1, user.level - 5)
        max_level = user.level + 5
        
        result = await session.execute(
            select(User).where(
                and_(
                    User.kingdom == target_kingdom,
                    User.level >= min_level,
                    User.level <= max_level,
                    User.id != user.id,
                    User.is_active == True,
                    User.current_hp >= User.hp * 0.3  # Must have enough HP
                )
            ).limit(10)
        )
        players = result.scalars().all()
    
    if not players:
        kingdom_info = GameConstants.KINGDOMS[target_kingdom]
        await callback.answer(
            f"–í {kingdom_info['name']} –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ PvP!\n"
            f"–ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤ —É—Ä–æ–≤–Ω—è {min_level}-{max_level} —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º HP",
            show_alert=True
        )
        return
    
    # Create player selection menu
    builder = InlineKeyboardBuilder()
    kingdom_info = GameConstants.KINGDOMS[target_kingdom]
    
    menu_text = (
        f"‚öîÔ∏è <b>–í—ã–±–æ—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞</b>\n\n"
        f"üè∞ {kingdom_info['emoji']} <b>{kingdom_info['name']}</b>\n"
        f"–ò–≥—Ä–æ–∫–∏ —É—Ä–æ–≤–Ω—è {min_level}-{max_level}:\n\n"
    )
    
    for player in players[:8]:  # Show max 8 players
        # Calculate relative strength
        player_total = player.strength + player.armor + player.agility
        user_total = user.strength + user.armor + user.agility
        
        if player_total > user_total * 1.2:
            strength_indicator = "üî¥ –°–∏–ª—å–Ω–µ–µ"
        elif player_total < user_total * 0.8:
            strength_indicator = "üü¢ –°–ª–∞–±–µ–µ"
        else:
            strength_indicator = "üü° –†–∞–≤–Ω—ã–π"
        
        menu_text += (
            f"üë§ <b>{player.name}</b> (–£—Ä.{player.level})\n"
            f"üìä {strength_indicator} | "
            f"‚ù§Ô∏è {player.current_hp}/{player.hp} | "
            f"üèÜ {player.pvp_wins}W/{player.pvp_losses}L\n\n"
        )
        
        builder.row(InlineKeyboardButton(
            text=f"‚öîÔ∏è –í—ã–∑–≤–∞—Ç—å {player.name}",
            callback_data=f"challenge_interactive_{player.id}"
        ))
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="interactive_pvp"))
    
    await callback.message.edit_text(menu_text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("challenge_interactive_"))
async def challenge_interactive_pvp(callback: CallbackQuery, user, is_registered: bool):
    """Challenge player to interactive PvP"""
    defender_id = int(callback.data.replace("challenge_interactive_", ""))
    
    pvp_service = EnhancedPvPService()
    battle = await pvp_service.create_interactive_pvp_battle(user.id, defender_id)
    
    if not battle:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∏—Ç–≤—É!", show_alert=True)
        return
    
    # Get defender info for display
    from config.database import AsyncSessionLocal
    from models.user import User
    
    async with AsyncSessionLocal() as session:
        defender = await session.get(User, defender_id)
    
    if not defender:
        await callback.answer("‚ùå –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # Notify challenger
    challenge_text = (
        f"‚öîÔ∏è <b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üéØ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: <b>{defender.name}</b> (–£—Ä.{defender.level})\n"
        f"üè∞ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {GameConstants.KINGDOMS[defender.kingdom.value]['emoji']} {GameConstants.KINGDOMS[defender.kingdom.value]['name']}\n\n"
        
        f"üìä <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</b>\n"
        f"‚öîÔ∏è –°–∏–ª–∞: <b>{defender.strength}</b>\n"
        f"üõ°Ô∏è –ë—Ä–æ–Ω—è: <b>{defender.armor}</b>\n"
        f"‚ù§Ô∏è HP: <b>{defender.hp}</b>\n"
        f"üí® –ü—Ä–æ–≤–æ—Ä–Ω–æ—Å—Ç—å: <b>{defender.agility}</b>\n\n"
        
        f"üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: <b>{defender.pvp_wins}W/{defender.pvp_losses}L</b>\n\n"
        
        f"‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...\n"
        f"ID –±–∏—Ç–≤—ã: #{battle.id}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_pvp_status_{battle.id}")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="battle_menu")]
    ])
    
    await callback.message.edit_text(challenge_text, reply_markup=keyboard)
    
    # Here would normally send notification to defender
    # For now just show success
    await callback.answer("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@router.callback_query(F.data.startswith("check_pvp_status_"))
async def check_pvp_battle_status(callback: CallbackQuery, user, is_registered: bool):
    """Check status of PvP battle"""
    battle_id = int(callback.data.replace("check_pvp_status_", ""))
    
    pvp_service = EnhancedPvPService()
    battle = await pvp_service.get_battle(battle_id)
    
    if not battle:
        await callback.answer("‚ùå –ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    if battle.phase.value == "monster_encounter":  # Still waiting for acceptance
        await callback.answer("‚è≥ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤", show_alert=True)
        return
    elif battle.phase.value == "finished":
        await show_interactive_pvp_results(callback, battle, user)
        return
    else:
        # Battle is active - show current state
        await show_interactive_pvp_battle_state(callback, battle, user)

async def show_interactive_pvp_battle_state(callback: CallbackQuery, battle, user):
    """Show current state of active PvP battle"""
    # Get opponent info
    from config.database import AsyncSessionLocal
    from models.user import User
    
    async with AsyncSessionLocal() as session:
        if battle.player1_id == user.id:
            opponent = await session.get(User, battle.player2_id)
            user_hp = battle.player1_hp
            user_mana = battle.player1_mana
            opponent_hp = battle.player2_hp
            user_attack = battle.player1_attack_choice
            user_dodge = battle.player1_dodge_choice
        else:
            opponent = await session.get(User, battle.player1_id)
            user_hp = battle.player2_hp
            user_mana = battle.player2_mana
            opponent_hp = battle.player1_hp
            user_attack = battle.player2_attack_choice
            user_dodge = battle.player2_dodge_choice
    
    phase_names = {
        'attack_selection': '–í—ã–±–æ—Ä –∞—Ç–∞–∫–∏',
        'dodge_selection': '–í—ã–±–æ—Ä —É–∫–ª–æ–Ω–µ–Ω–∏—è',
        'calculating': '–†–∞—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
    }
    
    status_text = (
        f"‚öîÔ∏è <b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –±–∏—Ç–≤–∞ #{battle.id}</b>\n\n"
        f"üîÑ –†–∞—É–Ω–¥: <b>{battle.current_round}</b>\n"
        f"üìç –§–∞–∑–∞: <b>{phase_names.get(battle.phase.value, battle.phase.value)}</b>\n\n"
        
        f"üë§ <b>–í—ã:</b> ‚ù§Ô∏è {user_hp}/{user.hp} | üîÆ {user_mana}/{user.mana}\n"
        f"üë§ <b>{opponent.name}:</b> ‚ù§Ô∏è {opponent_hp}/{opponent.hp}\n\n"
        
        f"üéØ –í–∞—à –≤—ã–±–æ—Ä –∞—Ç–∞–∫–∏: <b>{user_attack or '–ù–µ –≤—ã–±—Ä–∞–Ω'}</b>\n"
        f"üõ°Ô∏è –í–∞—à –≤—ã–±–æ—Ä —É–∫–ª–æ–Ω–µ–Ω–∏—è: <b>{user_dodge or '–ù–µ –≤—ã–±—Ä–∞–Ω'}</b>\n\n"
    )
    
    if battle.phase.value == "attack_selection":
        status_text += "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ç–∞–∫–∏..."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –¢–æ—á–Ω—ã–π —É–¥–∞—Ä", callback_data=f"pvp_attack_precise_{battle.id}")],
            [InlineKeyboardButton(text="üí• –ú–æ—â–Ω—ã–π —É–¥–∞—Ä", callback_data=f"pvp_attack_power_{battle.id}")],
            [InlineKeyboardButton(text="‚öîÔ∏è –û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞", callback_data=f"pvp_attack_normal_{battle.id}")]
        ])
    elif battle.phase.value == "dodge_selection":
        status_text += "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∫–ª–æ–Ω–µ–Ω–∏—è..."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–ª–µ–≤–æ", callback_data=f"pvp_dodge_left_{battle.id}")],
            [InlineKeyboardButton(text="üõ°Ô∏è –ë–ª–æ–∫", callback_data=f"pvp_dodge_center_{battle.id}")],
            [InlineKeyboardButton(text="‚û°Ô∏è –í–ø—Ä–∞–≤–æ", callback_data=f"pvp_dodge_right_{battle.id}")]
        ])
    else:
        status_text += "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞..."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"check_pvp_status_{battle.id}")]
        ])
    
    await callback.message.edit_text(status_text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("pvp_attack_"))
async def handle_pvp_attack_choice(callback: CallbackQuery, user, is_registered: bool):
    """Handle PvP attack choice"""
    parts = callback.data.split("_")
    attack_type = parts[2]  # precise, power, normal
    battle_id = int(parts[3])
    
    pvp_service = EnhancedPvPService()
    success = await pvp_service.make_pvp_attack_choice(battle_id, user.id, attack_type)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞—Ç–∞–∫–∏!", show_alert=True)
        return
    
    attack_names = {
        'precise': '–¢–æ—á–Ω—ã–π —É–¥–∞—Ä',
        'power': '–ú–æ—â–Ω—ã–π —É–¥–∞—Ä',
        'normal': '–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞'
    }
    
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω: {attack_names[attack_type]}")
    
    # Update battle state
    await show_interactive_pvp_battle_state(callback, await pvp_service.get_battle(battle_id), user)

@router.callback_query(F.data.startswith("pvp_dodge_"))
async def handle_pvp_dodge_choice(callback: CallbackQuery, user, is_registered: bool):
    """Handle PvP dodge choice"""
    parts = callback.data.split("_")
    direction = parts[2]  # left, center, right
    battle_id = int(parts[3])
    
    pvp_service = EnhancedPvPService()
    success = await pvp_service.make_pvp_dodge_choice(battle_id, user.id, direction)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–∫–ª–æ–Ω–µ–Ω–∏—è!", show_alert=True)
        return
    
    direction_names = {
        'left': '–í–ª–µ–≤–æ',
        'center': '–ë–ª–æ–∫',
        'right': '–í–ø—Ä–∞–≤–æ'
    }
    
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {direction_names[direction]}")
    
    # Show calculating message
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–†–∞—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞...</b>\n\n"
        f"‚è≥ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...\n"
        f"‚öîÔ∏è –†–∞—Å—á—ë—Ç –∞—Ç–∞–∫ –∏ –∑–∞—â–∏—Ç—ã...\n"
        f"üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...",
        reply_markup=None
    )
    
    # Wait and check results
    await asyncio.sleep(3)
    battle = await pvp_service.get_battle(battle_id)
    
    if battle.phase.value == "finished":
        await show_interactive_pvp_results(callback, battle, user)
    else:
        await show_interactive_pvp_round_results(callback, battle, user)

async def show_interactive_pvp_round_results(callback: CallbackQuery, battle, user):
    """Show PvP round results"""
    battle_log = battle.get_battle_log()
    if not battle_log:
        return
    
    last_round = battle_log[-1]
    
    # Get opponent info
    from config.database import AsyncSessionLocal
    from models.user import User
    
    async with AsyncSessionLocal() as session:
        if battle.player1_id == user.id:
            opponent = await session.get(User, battle.player2_id)
        else:
            opponent = await session.get(User, battle.player1_id)
    
    results_text = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞ {last_round['round']}</b>\n\n"
    
    # Show skills used
    if last_round.get('skills_used'):
        results_text += f"‚ú® <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:</b>\n"
        for player_key, skills in last_round['skills_used'].items():
            player_name = user.name if (player_key == 'player1' and battle.player1_id == user.id) or (player_key == 'player2' and battle.player2_id == user.id) else opponent.name
            if skills:
                results_text += f"[{player_name}]:\n"
                for skill in skills:
                    results_text += f"  ‚Ä¢ {skill['name']}: {skill['effect']}\n"
        results_text += "\n"
    
    # Show actions
    results_text += f"üéØ <b>–î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤:</b>\n"
    results_text += f"[{user.name}] –ê—Ç–∞–∫–∞: {last_round.get('player1_attack_type' if battle.player1_id == user.id else 'player2_attack_type')}\n"
    results_text += f"[{user.name}] –£–∫–ª–æ–Ω–µ–Ω–∏–µ: {last_round.get('player1_dodge' if battle.player1_id == user.id else 'player2_dodge')}\n"
    results_text += f"[{opponent.name}] –ê—Ç–∞–∫–∞: {last_round.get('player2_attack_type' if battle.player1_id == user.id else 'player1_attack_type')}\n"
    results_text += f"[{opponent.name}] –£–∫–ª–æ–Ω–µ–Ω–∏–µ: {last_round.get('player2_dodge' if battle.player1_id == user.id else 'player1_dodge')}\n\n"
    
    # Show events
    results_text += f"üìã <b>–°–æ–±—ã—Ç–∏—è —Ä–∞—É–Ω–¥–∞:</b>\n"
    for event in last_round['events']:
        results_text += f"‚Ä¢ {event}\n"
    
    results_text += f"\n‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—É–Ω–¥—É {battle.current_round}..."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öîÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–æ–π", callback_data=f"check_pvp_status_{battle.id}")]
    ])
    
    await callback.message.edit_text(results_text, reply_markup=keyboard)

async def show_interactive_pvp_results(callback: CallbackQuery, battle, user):
    """Show final PvP battle results"""
    battle_log = battle.get_battle_log()
    final_result = battle_log[-1] if battle_log else {}
    
    # Get opponent info
    from config.database import AsyncSessionLocal
    from models.user import User
    
    async with AsyncSessionLocal() as session:
        if battle.player1_id == user.id:
            opponent = await session.get(User, battle.player2_id)
        else:
            opponent = await session.get(User, battle.player1_id)
    
    user_won = (battle.winner_id == user.id)
    result_type = final_result.get('result', 'unknown')
    
    if user_won:
        result_text = (
            f"üèÜ <b>–ü–û–ë–ï–î–ê –í PvP!</b>\n\n"
            f"üéâ –í—ã –æ–¥–µ—Ä–∂–∞–ª–∏ –ø–æ–±–µ–¥—É –Ω–∞–¥ <b>{opponent.name}</b>!\n\n"
            
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è:</b>\n"
            f"‚è±Ô∏è –†–∞—É–Ω–¥–æ–≤: <b>{battle.current_round}</b>\n"
            f"üéØ –¢–∏–ø –ø–æ–±–µ–¥—ã: <b>{'–ü–æ —Ç–∞–π–º–∞—É—Ç—É' if 'timeout' in result_type else '–ë–æ–µ–≤–∞—è'}</b>\n\n"
            
            f"üéÅ <b>–ù–∞–≥—Ä–∞–¥—ã:</b>\n"
            f"‚ö° –û–ø—ã—Ç: <b>+{battle.exp_gained}</b>\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: <b>+{battle.money_gained}</b> –∑–æ–ª–æ—Ç–∞\n\n"
            
            f"üî• –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –≤ PvP —Ä–∞—Å—Ç—É—Ç!"
        )
    elif result_type == 'draw':
        result_text = (
            f"ü§ù <b>–ù–ò–ß–¨–Ø!</b>\n\n"
            f"–†–∞–≤–Ω—ã–π –±–æ–π —Å <b>{opponent.name}</b>!\n"
            f"–û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∏ –æ—Ç–ª–∏—á–Ω—ã–µ –Ω–∞–≤—ã–∫–∏.\n\n"
            f"‚è±Ô∏è –†–∞—É–Ω–¥–æ–≤: <b>{battle.current_round}</b>\n"
            f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –ø—Ä–∏ —Ä–∞–≤–Ω–æ–º HP"
        )
    else:
        result_text = (
            f"üíÄ <b>–ü–û–†–ê–ñ–ï–ù–ò–ï</b>\n\n"
            f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ <b>{opponent.name}</b>\n\n"
            
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è:</b>\n"
            f"‚è±Ô∏è –†–∞—É–Ω–¥–æ–≤: <b>{battle.current_round}</b>\n"
            f"üéØ –¢–∏–ø –ø–æ—Ä–∞–∂–µ–Ω–∏—è: <b>{'–ü–æ —Ç–∞–π–º–∞—É—Ç—É' if 'timeout' in result_type else '–ë–æ–µ–≤–æ–µ'}</b>\n\n"
            
            f"üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ò–∑—É—á–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏\n"
            f"‚Ä¢ –£–ª—É—á—à–∏—Ç–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ\n"
            f"‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ç–∞–∫—Ç–∏–∫–æ–π –∞—Ç–∞–∫\n"
            f"‚Ä¢ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –ø—Ä–æ—Ç–∏–≤ –ò–ò"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π PvP", callback_data="interactive_pvp")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="battle_menu")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard)