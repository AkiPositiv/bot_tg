from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.enhanced_battle_service import EnhancedBattleService
from models.interactive_battle import BattlePhaseEnum
import asyncio

router = Router()

@router.callback_query(F.data == "enhanced_pve_encounter")
async def start_enhanced_pve_encounter(callback: CallbackQuery, user, is_registered: bool):
    """Start enhanced PvE encounter with full TS compliance"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    if user.current_hp < user.hp * 0.3:
        await callback.answer("‚ù§Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –±–æ—è! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 30% HP", show_alert=True)
        return
    
    battle_service = EnhancedBattleService()
    battle = await battle_service.start_pve_encounter(user.id)
    
    if not battle:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!", show_alert=True)
        return
    
    monster_data = battle.get_monster_data()
    
    # Enhanced monster card with flee chance info
    level_diff = user.level - monster_data['level']
    base_chance = 0.6
    agility_bonus = (user.agility - 10) * 0.02
    level_bonus = level_diff * 0.05
    flee_chance = max(0.1, min(0.9, base_chance + agility_bonus + level_bonus))
    
    monster_card = (
        f"üéØ <b>–í—Å—Ç—Ä–µ—á–∞ —Å –º–æ–Ω—Å—Ç—Ä–æ–º!</b>\n\n"
        f"{monster_data['type_emoji']} <b>{monster_data['name']}</b>\n"
        f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>{monster_data['level']}</b>\n"
        f"{monster_data['difficulty_color']} –°–ª–æ–∂–Ω–æ—Å—Ç—å: <b>{monster_data['type_emoji']}</b>\n\n"
        
        f"üìä <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞:</b>\n"
        f"‚öîÔ∏è –°–∏–ª–∞: <b>{monster_data['strength']}</b>\n"
        f"üõ°Ô∏è –ë—Ä–æ–Ω—è: <b>{monster_data['armor']}</b>\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <b>{monster_data['hp']}</b>\n"
        f"üí® –ü—Ä–æ–≤–æ—Ä–Ω–æ—Å—Ç—å: <b>{monster_data['agility']}</b>\n\n"
        
        f"üéÅ <b>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–±–µ–¥—É:</b>\n"
        f"‚ö° –û–ø—ã—Ç: <b>+{monster_data['exp_reward']}</b>\n"
        f"üí∞ –î–µ–Ω—å–≥–∏: <b>+{monster_data['money_reward']}</b> –∑–æ–ª–æ—Ç–∞\n\n"
        
        f"üë§ <b>–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
        f"‚ù§Ô∏è HP: <b>{user.current_hp}/{user.hp}</b>\n"
        f"üîÆ –ú–∞–Ω–∞: <b>{user.current_mana}/{user.mana}</b>\n"
        f"üí® –ü—Ä–æ–≤–æ—Ä–Ω–æ—Å—Ç—å: <b>{user.agility}</b>\n\n"
        
        f"üèÉ‚Äç‚ôÇÔ∏è <b>–®–∞–Ω—Å –ø–æ–±–µ–≥–∞: {flee_chance:.1%}</b>\n"
        f"‚ö†Ô∏è –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–æ–±–µ–≥–µ –º–æ–Ω—Å—Ç—Ä –Ω–∞–Ω–µ—Å—ë—Ç —É–¥–∞—Ä!\n\n"
        
        f"–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öîÔ∏è –°—Ä–∞–∂–∞—Ç—å—Å—è!", callback_data=f"accept_enhanced_pve_{battle.id}")],
        [InlineKeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –°–±–µ–∂–∞—Ç—å", callback_data=f"flee_enhanced_pve_{battle.id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="battle_menu")]
    ])
    
    await callback.message.edit_text(monster_card, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("accept_enhanced_pve_"))
async def accept_enhanced_pve_battle(callback: CallbackQuery, user, is_registered: bool):
    """Accept enhanced PvE battle"""
    battle_id = int(callback.data.replace("accept_enhanced_pve_", ""))
    
    battle_service = EnhancedBattleService()
    battle = await battle_service.get_battle(battle_id)
    
    if not battle:
        await callback.answer("‚ùå –ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # Start with attack type selection
    await show_attack_type_selection(callback, battle_id, user)

@router.callback_query(F.data.startswith("flee_enhanced_pve_"))
async def flee_enhanced_pve_battle(callback: CallbackQuery, user, is_registered: bool):
    """Attempt to flee with chance calculation"""
    battle_id = int(callback.data.replace("flee_enhanced_pve_", ""))
    
    battle_service = EnhancedBattleService()
    success, message, damage = await battle_service.attempt_flee(battle_id, user.id)
    
    if success:
        await callback.message.edit_text(
            f"üèÉ‚Äç‚ôÇÔ∏è <b>–£—Å–ø–µ—à–Ω—ã–π –ø–æ–±–µ–≥!</b>\n\n"
            f"{message}\n\n"
            f"–ò–Ω–æ–≥–¥–∞ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ - –ª—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è.\n"
            f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∏–ª—å–Ω–µ–µ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –±–∏—Ç–≤", callback_data="battle_menu")]
            ])
        )
    else:
        await callback.message.edit_text(
            f"‚ùå <b>–ü–æ–±–µ–≥ –Ω–µ —É–¥–∞–ª—Å—è!</b>\n\n"
            f"{message}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è —Å—Ä–∞–∂–∞—Ç—å—Å—è!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öîÔ∏è –í –±–æ–π!", callback_data=f"accept_enhanced_pve_{battle_id}")]
            ])
        )
    
    await callback.answer()

async def show_attack_type_selection(callback: CallbackQuery, battle_id: int, user):
    """Show attack type selection with 3 options"""
    battle_service = EnhancedBattleService()
    battle = await battle_service.get_battle(battle_id)
    
    if not battle:
        return
    
    monster_data = battle.get_monster_data()
    
    attack_text = (
        f"‚öîÔ∏è <b>–†–∞—É–Ω–¥ {battle.current_round} - –í—ã–±–æ—Ä –∞—Ç–∞–∫–∏</b>\n\n"
        f"üë§ <b>–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
        f"‚ù§Ô∏è HP: <b>{battle.player1_hp}/{user.hp}</b>\n"
        f"üîÆ –ú–∞–Ω–∞: <b>{battle.player1_mana}/{user.mana}</b>\n\n"
        
        f"{monster_data['type_emoji']} <b>{monster_data['name']}:</b>\n"
        f"‚ù§Ô∏è HP: <b>{battle.monster_hp}/{monster_data['hp']}</b>\n\n"
        
        f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ç–∞–∫–∏:</b>\n\n"
        
        f"üéØ <b>–¢–æ—á–Ω—ã–π —É–¥–∞—Ä:</b>\n"
        f"‚Ä¢ 90% —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è\n"
        f"‚Ä¢ +50% —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞\n"
        f"‚Ä¢ +10% —É—Ä–æ–Ω–∞\n\n"
        
        f"üí• <b>–ú–æ—â–Ω—ã–π —É–¥–∞—Ä:</b>\n"
        f"‚Ä¢ 70% —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è\n"
        f"‚Ä¢ +30% —É—Ä–æ–Ω–∞\n"
        f"‚Ä¢ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏\n\n"
        
        f"‚öîÔ∏è <b>–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞:</b>\n"
        f"‚Ä¢ 80% —à–∞–Ω—Å –ø–æ–ø–∞–¥–∞–Ω–∏—è\n"
        f"‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–Ω\n"
        f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã\n\n"
        
        f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ –≤—ã–±–æ—Ä: <b>50 —Å–µ–∫—É–Ω–¥</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –¢–æ—á–Ω—ã–π —É–¥–∞—Ä", callback_data=f"attack_type_precise_{battle_id}")],
        [InlineKeyboardButton(text="üí• –ú–æ—â–Ω—ã–π —É–¥–∞—Ä", callback_data=f"attack_type_power_{battle_id}")],
        [InlineKeyboardButton(text="‚öîÔ∏è –û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞", callback_data=f"attack_type_normal_{battle_id}")]
    ])
    
    await callback.message.edit_text(attack_text, reply_markup=keyboard)
    
    # Start timeout checker
    asyncio.create_task(check_attack_timeout(battle_id, 50))

@router.callback_query(F.data.startswith("attack_type_"))
async def handle_attack_type_choice(callback: CallbackQuery, user, is_registered: bool):
    """Handle attack type choice"""
    parts = callback.data.split("_")
    attack_type = parts[2]  # precise, power, normal
    battle_id = int(parts[3])
    
    battle_service = EnhancedBattleService()
    success = await battle_service.make_attack_choice(battle_id, user.id, attack_type)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞—Ç–∞–∫–∏!", show_alert=True)
        return
    
    attack_names = {
        'precise': '–¢–æ—á–Ω—ã–π —É–¥–∞—Ä',
        'power': '–ú–æ—â–Ω—ã–π —É–¥–∞—Ä', 
        'normal': '–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞'
    }
    
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω: {attack_names[attack_type]}")
    await show_dodge_direction_selection(callback, battle_id, user)

async def show_dodge_direction_selection(callback: CallbackQuery, battle_id: int, user):
    """Show dodge direction selection"""
    battle_service = EnhancedBattleService()
    battle = await battle_service.get_battle(battle_id)
    
    if not battle:
        return
    
    monster_data = battle.get_monster_data()
    
    # Calculate perfect dodge chance
    perfect_dodge_chance = min(user.agility / 500.0, 0.07) * 100
    
    dodge_text = (
        f"üõ°Ô∏è <b>–†–∞—É–Ω–¥ {battle.current_round} - –£–∫–ª–æ–Ω–µ–Ω–∏–µ</b>\n\n"
        f"üë§ <b>–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
        f"‚ù§Ô∏è HP: <b>{battle.player1_hp}/{user.hp}</b>\n"
        f"üí® –ü—Ä–æ–≤–æ—Ä–Ω–æ—Å—Ç—å: <b>{user.agility}</b>\n\n"
        
        f"{monster_data['type_emoji']} <b>{monster_data['name']}:</b>\n"
        f"‚ù§Ô∏è HP: <b>{battle.monster_hp}/{monster_data['hp']}</b>\n\n"
        
        f"üõ°Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∫–ª–æ–Ω–µ–Ω–∏—è:</b>\n"
        f"–ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç! –£–∫–ª–æ–Ω–∏—Ç–µ—Å—å –≤ –Ω—É–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.\n\n"
        
        f"üí´ <b>–ú–∞—Å—Ç–µ—Ä—Å–∫–æ–µ —É–∫–ª–æ–Ω–µ–Ω–∏–µ:</b>\n"
        f"–î–∞–∂–µ –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –µ—Å—Ç—å <b>{perfect_dodge_chance:.1f}%</b> —à–∞–Ω—Å\n"
        f"–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–±–µ–∂–∞—Ç—å —É—Ä–æ–Ω–∞!\n\n"
        
        f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ –≤—ã–±–æ—Ä: <b>50 —Å–µ–∫—É–Ω–¥</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–ª–µ–≤–æ", callback_data=f"dodge_dir_left_{battle_id}"),
            InlineKeyboardButton(text="üõ°Ô∏è –ë–ª–æ–∫", callback_data=f"dodge_dir_center_{battle_id}"),
            InlineKeyboardButton(text="‚û°Ô∏è –í–ø—Ä–∞–≤–æ", callback_data=f"dodge_dir_right_{battle_id}")
        ]
    ])
    
    await callback.message.edit_text(dodge_text, reply_markup=keyboard)
    
    # Start timeout checker
    asyncio.create_task(check_dodge_timeout(battle_id, 50))

@router.callback_query(F.data.startswith("dodge_dir_"))
async def handle_dodge_direction_choice(callback: CallbackQuery, user, is_registered: bool):
    """Handle dodge direction choice"""
    parts = callback.data.split("_")
    direction = parts[2]  # left, center, right
    battle_id = int(parts[3])
    
    battle_service = EnhancedBattleService()
    success = await battle_service.make_direction_choice(battle_id, user.id, direction)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–∫–ª–æ–Ω–µ–Ω–∏—è!", show_alert=True)
        return
    
    direction_names = {
        'left': '–í–ª–µ–≤–æ',
        'center': '–ë–ª–æ–∫',
        'right': '–í–ø—Ä–∞–≤–æ'
    }
    
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {direction_names[direction]}")
    
    # Show calculating message
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–†–∞—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞...</b>\n\n"
        f"‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤...\n"
        f"‚öîÔ∏è –†–∞—Å—á—ë—Ç –∞—Ç–∞–∫ –∏ —É–∫–ª–æ–Ω–µ–Ω–∏–π...\n"
        f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...",
        reply_markup=None
    )
    
    # Wait for dramatic effect
    await asyncio.sleep(3)
    
    # Show round results
    await show_enhanced_round_results(callback, battle_id, user)

async def show_enhanced_round_results(callback: CallbackQuery, battle_id: int, user):
    """Show enhanced results of the round"""
    battle_service = EnhancedBattleService()
    battle = await battle_service.get_battle(battle_id)
    
    if not battle:
        return
    
    battle_log = battle.get_battle_log()
    if not battle_log:
        return
    
    last_round = battle_log[-1]
    
    # Build enhanced results text
    results_text = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞ {last_round['round']}</b>\n\n"
    
    # Show skills used
    if last_round.get('skills_used'):
        results_text += f"‚ú® <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:</b>\n"
        for skill in last_round['skills_used']:
            results_text += f"‚Ä¢ {skill['name']}: {skill['effect']}\n"
        results_text += "\n"
    
    results_text += f"üéØ <b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
    attack_type_names = {
        'precise': '–¢–æ—á–Ω—ã–π —É–¥–∞—Ä',
        'power': '–ú–æ—â–Ω—ã–π —É–¥–∞—Ä',
        'normal': '–û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞'
    }
    results_text += f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {attack_type_names.get(last_round['player_attack_type'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    results_text += f"üõ°Ô∏è –£–∫–ª–æ–Ω–µ–Ω–∏–µ: {last_round['player_dodge']}\n\n"
    
    results_text += f"üëπ <b>–î–µ–π—Å—Ç–≤–∏—è –º–æ–Ω—Å—Ç—Ä–∞:</b>\n"
    results_text += f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {last_round['monster_attack']}\n"
    results_text += f"üõ°Ô∏è –£–∫–ª–æ–Ω–µ–Ω–∏–µ: {last_round['monster_dodge']}\n\n"
    
    results_text += f"üìã <b>–°–æ–±—ã—Ç–∏—è —Ä–∞—É–Ω–¥–∞:</b>\n"
    for event in last_round['events']:
        results_text += f"‚Ä¢ {event}\n"
    
    # Check battle status
    if battle.phase.value == "finished":
        await show_enhanced_battle_finished(callback, battle, user)
        return
    
    # Continue to next round
    results_text += f"\n‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—É–Ω–¥—É {battle.current_round}..."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öîÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–æ–π", callback_data=f"continue_enhanced_battle_{battle_id}")]
    ])
    
    await callback.message.edit_text(results_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("continue_enhanced_battle_"))
async def continue_enhanced_battle(callback: CallbackQuery, user, is_registered: bool):
    """Continue to next round"""
    battle_id = int(callback.data.replace("continue_enhanced_battle_", ""))
    await show_attack_type_selection(callback, battle_id, user)

async def show_enhanced_battle_finished(callback: CallbackQuery, battle, user):
    """Show enhanced battle finished results"""
    battle_log = battle.get_battle_log()
    final_result = battle_log[-1] if battle_log else {}
    
    if battle.winner_id == user.id:
        # Victory
        result_text = (
            f"üèÜ <b>–í–ï–õ–ò–ö–û–õ–ï–ü–ù–ê–Ø –ü–û–ë–ï–î–ê!</b>\n\n"
            f"üéâ –í—ã –æ–¥–µ—Ä–∂–∞–ª–∏ –ø–æ–±–µ–¥—É –≤ –±–æ—é!\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è:</b>\n"
            f"‚è±Ô∏è –†–∞—É–Ω–¥–æ–≤: <b>{battle.current_round}</b>\n"
            f"üí™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: <b>{len([r for r in battle_log if r.get('skills_used')])}</b>\n\n"
            
            f"üéÅ <b>–ù–∞–≥—Ä–∞–¥—ã:</b>\n"
            f"‚ö° –û–ø—ã—Ç: <b>+{battle.exp_gained}</b>\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: <b>+{battle.money_gained}</b> –∑–æ–ª–æ—Ç–∞\n\n"
            
            f"üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å—Ä–∞–∂–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –µ—â—ë —Å–∏–ª—å–Ω–µ–µ!\n"
            f"üéØ –ù–∞–≤—ã–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∞—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!"
        )
    else:
        # Defeat or flee
        result_type = final_result.get('result', 'defeat')
        if result_type == 'timeout':
            result_text = (
                f"‚è∞ <b>–í–†–ï–ú–Ø –í–´–®–õ–û!</b>\n\n"
                f"–ë–æ–π –∑–∞—Ç—è–Ω—É–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.\n"
                f"–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –±—ã—Å—Ç—Ä–µ–µ!"
            )
        else:
            result_text = (
                f"üíÄ <b>–ü–û–†–ê–ñ–ï–ù–ò–ï!</b>\n\n"
                f"–í—ã –ø–æ—Ç–µ—Ä–ø–µ–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–æ—é.\n"
                f"üí° –°–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:\n"
                f"‚Ä¢ –ü—Ä–æ–∫–∞—á–∞–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n"
                f"‚Ä¢ –ò–∑—É—á–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏\n"
                f"‚Ä¢ –ö—É–ø–∏—Ç–µ –ª—É—á—à–µ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–∞–∫—Ç–∏–∫—É –∞—Ç–∞–∫!"
            )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –±–æ–π", callback_data="enhanced_pve_encounter")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="battle_menu")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard)

async def check_attack_timeout(battle_id: int, timeout_seconds: int):
    """Check for attack selection timeout"""
    await asyncio.sleep(timeout_seconds)
    
    battle_service = EnhancedBattleService()
    battle = await battle_service.get_battle(battle_id)
    
    if battle and battle.phase == BattlePhaseEnum.attack_selection:
        # Auto-select normal attack
        await battle_service.make_attack_choice(battle_id, battle.player1_id, 'normal')

async def check_dodge_timeout(battle_id: int, timeout_seconds: int):
    """Check for dodge selection timeout"""
    await asyncio.sleep(timeout_seconds)
    
    battle_service = EnhancedBattleService()
    battle = await battle_service.get_battle(battle_id)
    
    if battle and battle.phase == BattlePhaseEnum.dodge_selection:
        # Auto-select center (no dodge)
        await battle_service.make_direction_choice(battle_id, battle.player1_id, 'center')