from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from services.enhanced_kingdom_war_service import EnhancedKingdomWarService
from keyboards.main_menu import battle_menu_keyboard

router = Router()

@router.callback_query(F.data == "enhanced_battle_menu")
async def show_enhanced_battle_menu(callback: CallbackQuery, user, is_registered: bool):
    """Show enhanced battle menu with war blocking check"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    # Check if user is blocked due to war participation
    war_service = EnhancedKingdomWarService()
    is_blocked, block_message = await war_service.check_user_war_block(user.id)
    
    if is_blocked:
        await callback.message.edit_text(
            f"‚öîÔ∏è <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</b>\n\n"
            f"üö´ {block_message}\n\n"
            f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –ø–æ–∫–∞ –∏–¥—ë—Ç –≤–æ–π–Ω–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤.\n"
            f"–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–∞–∂–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="enhanced_battle_menu")],
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return
    
    # Show enhanced battle menu
    battle_text = (
        f"‚öîÔ∏è <b>–ú–µ–Ω—é —Å—Ä–∞–∂–µ–Ω–∏–π v3.0</b>\n\n"
        f"üë§ {user.name} | –£—Ä–æ–≤–µ–Ω—å {user.level}\n"
        f"üí™ –°–∏–ª–∞: {user.strength} | üõ°Ô∏è –ë—Ä–æ–Ω—è: {user.armor}\n"
        f"‚ù§Ô∏è HP: {user.current_hp}/{user.hp} | üîÆ –ú–∞–Ω–∞: {user.current_mana}/{user.mana}\n\n"
        
        f"üÜï <b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        f"üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ PvE –±–æ–∏ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π\n"
        f"‚öîÔ∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ PvP –±–∏—Ç–≤—ã –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏\n"
        f"üè∞ –£—á–∞—Å—Ç–∏–µ –≤ –≤–æ–π–Ω–∞—Ö –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤\n"
        f"‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤\n\n"
        
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ä–∞–∂–µ–Ω–∏—è:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π PvE", callback_data="enhanced_pve_encounter"),
            InlineKeyboardButton(text="‚öîÔ∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π PvP", callback_data="interactive_pvp")
        ],
        [
            InlineKeyboardButton(text="ü§ñ –ë—ã—Å—Ç—Ä–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="quick_training"),
            InlineKeyboardButton(text="üè∞ –ê—Ç–∞–∫–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞", callback_data="kingdom_attack")
        ],
        [
            InlineKeyboardButton(text="üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞", callback_data="kingdom_defense"),
            InlineKeyboardButton(text="‚öîÔ∏è –í–æ–π–Ω—ã –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤", callback_data="kingdom_wars_menu")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–µ–≤", callback_data="battle_stats"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ])
    
    await callback.message.edit_text(battle_text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "kingdom_wars_menu")
async def show_kingdom_wars_menu(callback: CallbackQuery, user, is_registered: bool):
    """Show kingdom wars menu with schedule"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    from datetime import datetime
    import pytz
    
    # Get current time in Tashkent timezone
    tashkent_tz = pytz.timezone('Asia/Tashkent')
    current_time = datetime.now(tashkent_tz)
    
    # Calculate next war times
    war_times = [8, 13, 18]
    next_wars = []
    
    for hour in war_times:
        war_time = current_time.replace(hour=hour, minute=0, second=0, microsecond=0)
        if war_time <= current_time:
            # Add one day if time has passed
            war_time = war_time.replace(day=war_time.day + 1)
        next_wars.append(war_time)
    
    # Sort by time
    next_wars.sort()
    next_war = next_wars[0]
    
    wars_text = (
        f"üè∞ <b>–í–æ–π–Ω—ã –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤</b>\n\n"
        f"‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–æ–π–Ω:</b>\n"
        f"üåÖ 8:00 - –£—Ç—Ä–µ–Ω–Ω—è—è –∞—Ç–∞–∫–∞\n"
        f"üåû 13:00 - –î–Ω–µ–≤–Ω–æ–µ —Å—Ä–∞–∂–µ–Ω–∏–µ\n"
        f"üåÜ 18:00 - –í–µ—á–µ—Ä–Ω—è—è –±–∏—Ç–≤–∞\n"
        f"<i>–í—Ä–µ–º—è: –¢–∞—à–∫–µ–Ω—Ç—Å–∫–æ–µ (UTC+5)</i>\n\n"
        
        f"üî• <b>–°–ª–µ–¥—É—é—â–∞—è –≤–æ–π–Ω–∞:</b>\n"
        f"üìÖ {next_war.strftime('%d.%m.%Y –≤ %H:%M')}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: <b>{format_time_until(next_war, current_time)}</b>\n\n"
        
        f"üë§ <b>–í–∞—à–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ:</b>\n"
        f"üè∞ {get_kingdom_emoji(user.kingdom.value)} {get_kingdom_name(user.kingdom.value)}\n\n"
        
        f"üí° <b>–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:</b>\n"
        f"üó°Ô∏è –ê—Ç–∞–∫—É–π—Ç–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞\n"
        f"üõ°Ô∏è –ó–∞—â–∏—â–∞–π—Ç–µ —Å–≤–æ—ë –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ\n"
        f"üí∞ –ü–æ–ª—É—á–∞–π—Ç–µ 40% –¥–µ–Ω–µ–≥ –ø–æ–±–µ–∂–¥—ë–Ω–Ω—ã—Ö\n"
        f"‚ö° –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ–ø—ã—Ç –∑–∞ —É—á–∞—Å—Ç–∏–µ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üó°Ô∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞—Ç–∞–∫–µ", callback_data="join_attack_menu"),
            InlineKeyboardButton(text="üõ°Ô∏è –ó–∞—â–∏—â–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ", callback_data="join_defense")
        ],
        [
            InlineKeyboardButton(text="üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–π–Ω", callback_data="my_war_results"),
            InlineKeyboardButton(text="üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤", callback_data="kingdom_stats")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ü—Ä–∞–≤–∏–ª–∞ –≤–æ–π–Ω", callback_data="war_rules"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="enhanced_battle_menu")
        ]
    ])
    
    await callback.message.edit_text(wars_text, reply_markup=keyboard)
    await callback.answer()

def get_kingdom_emoji(kingdom: str) -> str:
    """Get kingdom emoji"""
    emojis = {
        'north': '‚ùÑÔ∏è',
        'west': 'üåÖ',
        'east': 'üå∏',
        'south': 'üî•'
    }
    return emojis.get(kingdom, 'üè∞')

def get_kingdom_name(kingdom: str) -> str:
    """Get kingdom name"""
    names = {
        'north': '–°–µ–≤–µ—Ä–Ω–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ',
        'west': '–ó–∞–ø–∞–¥–Ω–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ',
        'east': '–í–æ—Å—Ç–æ—á–Ω–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ',
        'south': '–Æ–∂–Ω–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ'
    }
    return names.get(kingdom, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ')

def format_time_until(target_time, current_time):
    """Format time until target"""
    delta = target_time - current_time
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, _ = divmod(remainder, 60)
    
    if delta.days > 0:
        return f"{delta.days}–¥ {hours}—á {minutes}–º"
    elif hours > 0:
        return f"{hours}—á {minutes}–º"
    else:
        return f"{minutes}–º"

@router.callback_query(F.data == "join_attack_menu")
async def show_join_attack_menu(callback: CallbackQuery, user, is_registered: bool):
    """Show menu to join attack on kingdoms"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    from config.settings import GameConstants
    
    attack_text = (
        f"üó°Ô∏è <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞—Ç–∞–∫–µ</b>\n\n"
        f"üë§ –í–∞—à–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {get_kingdom_emoji(user.kingdom.value)} {get_kingdom_name(user.kingdom.value)}\n\n"
        f"‚öîÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏:\n"
        f"<i>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Å–≤–æ—ë –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ</i>\n\n"
        
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
        f"–ü–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∞—Ç–∞–∫–µ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ\n"
        f"–¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ–π–Ω—ã."
    )
    
    builder = InlineKeyboardBuilder()
    
    # Show other kingdoms for attack
    kingdoms = {
        'north': '‚ùÑÔ∏è –°–µ–≤–µ—Ä–Ω–æ–µ',
        'west': 'üåÖ –ó–∞–ø–∞–¥–Ω–æ–µ',
        'east': 'üå∏ –í–æ—Å—Ç–æ—á–Ω–æ–µ', 
        'south': 'üî• –Æ–∂–Ω–æ–µ'
    }
    
    for kingdom_id, kingdom_name in kingdoms.items():
        if kingdom_id != user.kingdom.value:
            builder.row(InlineKeyboardButton(
                text=f"üó°Ô∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å {kingdom_name}",
                callback_data=f"join_attack_{kingdom_id}"
            ))
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="kingdom_wars_menu"))
    
    await callback.message.edit_text(attack_text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("join_attack_"))
async def join_attack_squad(callback: CallbackQuery, user, is_registered: bool):
    """Join attack squad for specific kingdom"""
    target_kingdom = callback.data.replace("join_attack_", "")
    
    # Get next war time
    from datetime import datetime
    import pytz
    
    tashkent_tz = pytz.timezone('Asia/Tashkent')
    current_time = datetime.now(tashkent_tz)
    
    # Find next war time
    war_times = [8, 13, 18]
    next_war_time = None
    
    for hour in war_times:
        war_time = current_time.replace(hour=hour, minute=0, second=0, microsecond=0)
        if war_time > current_time:
            next_war_time = war_time
            break
    
    if not next_war_time:
        # Tomorrow's first war
        tomorrow = current_time.replace(day=current_time.day + 1, hour=8, minute=0, second=0, microsecond=0)
        next_war_time = tomorrow
    
    # Convert to UTC for storage
    next_war_time_utc = next_war_time.astimezone(pytz.UTC)
    
    war_service = EnhancedKingdomWarService()
    success, message = await war_service.join_attack_squad(user.id, target_kingdom, next_war_time_utc)
    
    if success:
        result_text = (
            f"‚úÖ <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∞—Ç–∞–∫–µ!</b>\n\n"
            f"{message}\n\n"
            f"üéØ –¶–µ–ª—å: {get_kingdom_emoji(target_kingdom)} {get_kingdom_name(target_kingdom)}\n"
            f"‚è∞ –í—Ä–µ–º—è –≤–æ–π–Ω—ã: {next_war_time.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            
            f"üö´ <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã\n"
            f"–¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ–π–Ω—ã –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤.\n\n"
            
            f"–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ —Å—Ä–∞–∂–µ–Ω–∏—è!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè∞ –°—Ç–∞—Ç—É—Å –≤–æ–π–Ω—ã", callback_data="kingdom_wars_menu")],
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        result_text = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</b>\n\n"
            f"{message}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ü–µ–ª—å."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="join_attack_menu")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="kingdom_wars_menu")]
        ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "join_defense")
async def join_defense_squad(callback: CallbackQuery, user, is_registered: bool):
    """Join defense squad for own kingdom"""
    # Get next war time
    from datetime import datetime
    import pytz
    
    tashkent_tz = pytz.timezone('Asia/Tashkent')
    current_time = datetime.now(tashkent_tz)
    
    # Find next war time
    war_times = [8, 13, 18]
    next_war_time = None
    
    for hour in war_times:
        war_time = current_time.replace(hour=hour, minute=0, second=0, microsecond=0)
        if war_time > current_time:
            next_war_time = war_time
            break
    
    if not next_war_time:
        # Tomorrow's first war
        tomorrow = current_time.replace(day=current_time.day + 1, hour=8, minute=0, second=0, microsecond=0)
        next_war_time = tomorrow
    
    # Convert to UTC for storage
    next_war_time_utc = next_war_time.astimezone(pytz.UTC)
    
    war_service = EnhancedKingdomWarService()
    success, message = await war_service.join_defense_squad(user.id, next_war_time_utc)
    
    if success:
        result_text = (
            f"üõ°Ô∏è <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∑–∞—â–∏—Ç–µ!</b>\n\n"
            f"{message}\n\n"
            f"üè∞ –ó–∞—â–∏—â–∞–µ—Ç–µ: {get_kingdom_emoji(user.kingdom.value)} {get_kingdom_name(user.kingdom.value)}\n"
            f"‚è∞ –í—Ä–µ–º—è –≤–æ–π–Ω—ã: {next_war_time.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
            
            f"üí™ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤:</b>\n"
            f"‚Ä¢ +30% –∫ –±—Ä–æ–Ω–µ –ø—Ä–∏ –∞—Ç–∞–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤\n"
            f"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω—ã –∞—Ç–∞–∫–∏\n"
            f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞—â–∏—Ç–µ\n\n"
            
            f"üö´ <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
            f"–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã\n"
            f"–¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ–π–Ω—ã."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè∞ –°—Ç–∞—Ç—É—Å –≤–æ–π–Ω—ã", callback_data="kingdom_wars_menu")],
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        result_text = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</b>\n\n"
            f"{message}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="join_defense")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="kingdom_wars_menu")]
        ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard)
    await callback.answer()

# Placeholder handlers for other war-related functions
@router.callback_query(F.data.in_(["my_war_results", "kingdom_stats", "war_rules"]))
async def war_placeholder_handlers(callback: CallbackQuery):
    """Placeholder handlers for war features"""
    feature_names = {
        "my_war_results": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–π–Ω",
        "kingdom_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤",
        "war_rules": "–ü—Ä–∞–≤–∏–ª–∞ –≤–æ–π–Ω"
    }
    
    feature_name = feature_names.get(callback.data, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è")
    await callback.answer(f"{feature_name} –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!", show_alert=True)

from aiogram.utils.keyboard import InlineKeyboardBuilder