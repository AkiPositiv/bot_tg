from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.enhanced_kingdom_war_service import EnhancedKingdomWarService
from services.user_service import UserService
from config.settings import GameConstants
from datetime import datetime, timedelta
import pytz
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "kingdom_wars")
async def show_kingdom_wars_menu(callback: CallbackQuery, user, is_registered: bool):
    """Show kingdom wars main menu"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    war_service = EnhancedKingdomWarService()
    
    # Check if user is blocked due to war participation
    is_blocked, block_message = await war_service.check_user_war_block(user.id)
    
    tashkent_tz = pytz.timezone('Asia/Tashkent')
    now = datetime.now(tashkent_tz)
    
    # Get next war times
    next_wars = []
    war_times = [8, 13, 18]
    
    for hour in war_times:
        next_war = now.replace(hour=hour, minute=0, second=0, microsecond=0)
        if next_war <= now:
            next_war += timedelta(days=1)
        next_wars.append(next_war)
    
    next_war_text = "‚è∞ **–°–ª–µ–¥—É—é—â–∏–µ –≤–æ–π–Ω—ã:**\n"
    for war_time in next_wars[:3]:  # Show next 3 wars
        time_str = war_time.strftime("%H:%M")
        if war_time.date() == now.date():
            next_war_text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è –≤ {time_str}\n"
        else:
            next_war_text += f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ {time_str}\n"
    
    kingdom_info = GameConstants.KINGDOMS[user.kingdom.value]
    
    menu_text = (
        f"üè∞ **–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ –ë–∏—Ç–≤—ã**\n\n"
        f"–í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å {kingdom_info['emoji']} **{kingdom_info['name']}**\n\n"
        f"{next_war_text}\n"
    )
    
    if is_blocked:
        menu_text += f"‚ö†Ô∏è **{block_message}**\n\n"
    
    menu_text += (
        f"**–ü—Ä–∞–≤–∏–ª–∞ –≤–æ–π–Ω:**\n"
        f"‚Ä¢ –í–æ–π–Ω—ã –ø—Ä–æ—Ö–æ–¥—è—Ç 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å\n" 
        f"‚Ä¢ –ó–∞ 30 –º–∏–Ω—É—Ç –¥–æ –≤–æ–π–Ω—ã - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        f"‚Ä¢ –ú–æ–∂–Ω–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ª—é–±–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –∏–ª–∏ –∑–∞—â–∏—â–∞—Ç—å —Å–≤–æ—ë\n"
        f"‚Ä¢ –ü—Ä–∏ –∞—Ç–∞–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç +30% –∫ –∑–∞—â–∏—Ç–µ\n"
        f"‚Ä¢ –ù–µ—É—á–∞—Å—Ç–≤—É—é—â–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∏ —Ç–µ—Ä—è—é—Ç 40% –∑–æ–ª–æ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ\n"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ", callback_data="kingdom_war_attack")],
        [InlineKeyboardButton(text="üõ°Ô∏è –ó–∞—â–∏—â–∞—Ç—å —Å–≤–æ—ë –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ", callback_data="kingdom_war_defend")],
        [InlineKeyboardButton(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–π–Ω", callback_data="war_results")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="battle_menu")]
    ])
    
    await callback.message.edit_text(menu_text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "kingdom_war_attack")
async def show_attack_kingdoms(callback: CallbackQuery, user, is_registered: bool):
    """Show kingdoms available for attack"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    war_service = EnhancedKingdomWarService()
    
    # Check if user is blocked
    is_blocked, block_message = await war_service.check_user_war_block(user.id)
    if is_blocked:
        await callback.answer(block_message, show_alert=True)
        return
    
    # Get next war times
    tashkent_tz = pytz.timezone('Asia/Tashkent')
    now = datetime.now(tashkent_tz)
    war_times = [8, 13, 18]
    
    # Find next available war time
    next_wars = []
    for hour in war_times:
        next_war = now.replace(hour=hour, minute=0, second=0, microsecond=0)
        if next_war <= now:
            next_war += timedelta(days=1)
        next_wars.append(next_war)
    
    builder = InlineKeyboardBuilder()
    
    # Add kingdom attack buttons for each time slot
    for war_time in next_wars[:2]:  # Show next 2 wars
        time_str = war_time.strftime("%H:%M")
        date_str = "—Å–µ–≥–æ–¥–Ω—è" if war_time.date() == now.date() else "–∑–∞–≤—Ç—Ä–∞"
        
        # Add kingdoms to attack (except user's own)
        for kingdom_key, kingdom_info in GameConstants.KINGDOMS.items():
            if kingdom_key != user.kingdom.value:
                builder.row(InlineKeyboardButton(
                    text=f"‚öîÔ∏è {kingdom_info['emoji']} {kingdom_info['name']} [{date_str} {time_str}]",
                    callback_data=f"attack_kingdom_{kingdom_key}_{war_time.strftime('%Y%m%d_%H')}"
                ))
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="kingdom_wars"))
    
    await callback.message.edit_text(
        f"‚öîÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏**\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–π–Ω—ã:\n"
        f"‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –≤–æ–π–Ω–∞—Ö\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã\n"
        f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –∏ –≤—Ä–µ–º—è –≤–æ–π–Ω—ã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("attack_kingdom_"))
async def join_attack_squad(callback: CallbackQuery, user, is_registered: bool):
    """Join attack squad for specific kingdom and time"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    # Parse callback data: attack_kingdom_{kingdom}_{date}_{hour}
    parts = callback.data.split("_")
    target_kingdom = parts[2]
    date_hour = "_".join(parts[3:])  # YYYYMMDD_HH
    
    try:
        war_datetime = datetime.strptime(date_hour, "%Y%m%d_%H")
        tashkent_tz = pytz.timezone('Asia/Tashkent')
        war_time = tashkent_tz.localize(war_datetime)
        war_time_utc = war_time.astimezone(pytz.UTC)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!", show_alert=True)
        return
    
    war_service = EnhancedKingdomWarService()
    success, message = await war_service.join_attack_squad(user.id, target_kingdom, war_time_utc)
    
    if success:
        kingdom_info = GameConstants.KINGDOMS[target_kingdom]
        await callback.message.edit_text(
            f"‚úÖ **–ó–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞—Ç–∞–∫—É!**\n\n"
            f"üéØ –¶–µ–ª—å: {kingdom_info['emoji']} **{kingdom_info['name']}**\n"
            f"‚è∞ –í—Ä–µ–º—è: {war_time.strftime('%d.%m.%Y –≤ %H:%M')} (–¢–∞—à–∫–µ–Ω—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è)\n\n"
            f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ–π–Ω—ã!\n\n"
            f"–ó–∞ 30 –º–∏–Ω—É—Ç –¥–æ –≤–æ–π–Ω—ã –±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –≤–æ–π–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞—Ç–∞–∫—É!")
    else:
        await callback.answer(message, show_alert=True)

@router.callback_query(F.data == "kingdom_war_defend")
async def show_defend_options(callback: CallbackQuery, user, is_registered: bool):
    """Show defense options for user's kingdom"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    war_service = EnhancedKingdomWarService()
    
    # Check if user is blocked
    is_blocked, block_message = await war_service.check_user_war_block(user.id)
    if is_blocked:
        await callback.answer(block_message, show_alert=True)
        return
    
    # Get next war times
    tashkent_tz = pytz.timezone('Asia/Tashkent')
    now = datetime.now(tashkent_tz)
    war_times = [8, 13, 18]
    
    # Find next available war times
    next_wars = []
    for hour in war_times:
        next_war = now.replace(hour=hour, minute=0, second=0, microsecond=0)
        if next_war <= now:
            next_war += timedelta(days=1)
        next_wars.append(next_war)
    
    builder = InlineKeyboardBuilder()
    
    # Add defense options for each time slot
    for war_time in next_wars[:2]:  # Show next 2 wars
        time_str = war_time.strftime("%H:%M")
        date_str = "—Å–µ–≥–æ–¥–Ω—è" if war_time.date() == now.date() else "–∑–∞–≤—Ç—Ä–∞"
        
        builder.row(InlineKeyboardButton(
            text=f"üõ°Ô∏è –ó–∞—â–∏—â–∞—Ç—å {date_str} –≤ {time_str}",
            callback_data=f"defend_kingdom_{war_time.strftime('%Y%m%d_%H')}"
        ))
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="kingdom_wars"))
    
    kingdom_info = GameConstants.KINGDOMS[user.kingdom.value]
    
    await callback.message.edit_text(
        f"üõ°Ô∏è **–ó–∞—â–∏—Ç–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞**\n\n"
        f"–í–∞—à–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: {kingdom_info['emoji']} **{kingdom_info['name']}**\n\n"
        f"**–í–∞–∂–Ω–æ:**\n"
        f"‚Ä¢ –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø–∏—à–µ—Ç–µ—Å—å –Ω–∞ –∑–∞—â–∏—Ç—É –∏ –≤–∞—à–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –∞—Ç–∞–∫—É—é—Ç, –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ 40% –∑–æ–ª–æ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ\n"
        f"‚Ä¢ –ó–∞—â–∏—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç +30% –∫ –∑–∞—â–∏—Ç–µ –ø—Ä–∏ –∞—Ç–∞–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ–π–Ω—ã\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞—â–∏—Ç—ã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("defend_kingdom_"))
async def join_defense_squad(callback: CallbackQuery, user, is_registered: bool):
    """Join defense squad for specific time"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    # Parse callback data: defend_kingdom_{date}_{hour}
    date_hour = callback.data.replace("defend_kingdom_", "")
    
    try:
        war_datetime = datetime.strptime(date_hour, "%Y%m%d_%H")
        tashkent_tz = pytz.timezone('Asia/Tashkent')
        war_time = tashkent_tz.localize(war_datetime)
        war_time_utc = war_time.astimezone(pytz.UTC)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!", show_alert=True)
        return
    
    war_service = EnhancedKingdomWarService()
    success, message = await war_service.join_defense_squad(user.id, war_time_utc)
    
    if success:
        kingdom_info = GameConstants.KINGDOMS[user.kingdom.value]
        await callback.message.edit_text(
            f"üõ°Ô∏è **–ó–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞—â–∏—Ç—É!**\n\n"
            f"üè∞ –ó–∞—â–∏—â–∞–µ–º: {kingdom_info['emoji']} **{kingdom_info['name']}**\n"
            f"‚è∞ –í—Ä–µ–º—è: {war_time.strftime('%d.%m.%Y –≤ %H:%M')} (–¢–∞—à–∫–µ–Ω—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è)\n\n"
            f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ–π–Ω—ã!\n\n"
            f"–ó–∞ 30 –º–∏–Ω—É—Ç –¥–æ –≤–æ–π–Ω—ã –±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –≤–æ–π–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        await callback.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞—â–∏—Ç—É!")
    else:
        await callback.answer(message, show_alert=True)

@router.callback_query(F.data == "war_results")
async def show_war_results_menu(callback: CallbackQuery, user, is_registered: bool):
    """Show war results menu"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    await callback.message.edit_text(
        f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–π–Ω**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìà –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="my_war_results")],
            [InlineKeyboardButton(text="üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="global_war_results")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="kingdom_wars")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "my_war_results")
async def show_my_war_results(callback: CallbackQuery, user, is_registered: bool):
    """Show user's personal war results"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    # This would be implemented to show user's recent war participations
    await callback.message.edit_text(
        f"üìà **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–π–Ω**\n\n"
        f"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –≤–æ–π–Ω—ã!\n\n"
        f"–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏—è –≤ –≤–æ–π–Ω–∞—Ö\n"
        f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø–æ—Ç–µ—Ä–∏\n"
        f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—Ç–∞–∫–∞–º –∏ –∑–∞—â–∏—Ç–µ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="war_results")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "global_war_results")
async def show_global_war_results(callback: CallbackQuery, user, is_registered: bool):
    """Show global war results"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    # This would show recent global war results
    await callback.message.edit_text(
        f"üåç **–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–π–Ω**\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–π–Ω—ã –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å!\n\n"
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å:\n"
        f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–π –≤–æ–π–Ω—ã\n"
        f"‚Ä¢ –£—á–∞—Å—Ç–≤—É—é—â–∏–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞\n"
        f"‚Ä¢ –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Å—É–º–º—ã –∑–æ–ª–æ—Ç–∞\n"
        f"‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="war_results")]
        ])
    )
    await callback.answer()

@router.message(F.text == "/war_result")
async def cmd_war_result(message, user, is_registered: bool):
    """Command to show latest war result for user"""
    if not is_registered:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    war_service = EnhancedKingdomWarService()
    
    # Get user's latest war result
    from config.database import AsyncSessionLocal
    from models.kingdom_war import WarParticipation, KingdomWar, WarStatusEnum
    from sqlalchemy import select, desc, and_
    
    async with AsyncSessionLocal() as session:
        # Get user's latest war participation
        latest_participation = await session.execute(
            select(WarParticipation)
            .join(KingdomWar)
            .where(
                and_(
                    WarParticipation.user_id == user.id,
                    KingdomWar.status == WarStatusEnum.finished
                )
            )
            .order_by(desc(WarParticipation.joined_at))
            .limit(1)
        )
        
        participation = latest_participation.scalar_one_or_none()
        
        if not participation:
            await message.reply(
                f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–æ–π–Ω—ã**\n\n"
                f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–∏–π –≤ –≤–æ–π–Ω–∞—Ö –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤.\n\n"
                f"–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ:\n"
                f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –±–∏—Ç–≤\n"
                f"2. –í—ã–±–µ—Ä–∏—Ç–µ '–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ –±–∏—Ç–≤—ã'\n"
                f"3. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∞—Ç–∞–∫—É –∏–ª–∏ –∑–∞—â–∏—Ç—É",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè∞ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ –±–∏—Ç–≤—ã", callback_data="kingdom_wars")]
                ])
            )
            return
        
        # Get war details
        war = await session.get(KingdomWar, participation.war_id)
        
        if not war:
            await message.reply("–û—à–∏–±–∫–∞: –≤–æ–π–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # Create result message
        from config.settings import GameConstants
        import pytz
        
        war_time = war.started_at.astimezone(pytz.timezone('Asia/Tashkent'))
        kingdom_info = GameConstants.KINGDOMS.get(participation.kingdom, {})
        
        result_text = (
            f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–æ–π–Ω—ã**\n\n"
            f"üóìÔ∏è **–î–∞—Ç–∞:** {war_time.strftime('%d.%m.%Y –≤ %H:%M')}\n"
            f"üè∞ **–í–∞—à–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ:** {kingdom_info.get('emoji', 'üè∞')} {kingdom_info.get('name', participation.kingdom)}\n"
            f"‚öîÔ∏è **–†–æ–ª—å:** {'–ê—Ç–∞–∫—É—é—â–∏–π' if participation.role == 'attacker' else '–ó–∞—â–∏—Ç–Ω–∏–∫'}\n\n"
        )
        
        # War outcome
        battle_results = war.get_battle_results()
        if battle_results:
            if participation.role == 'attacker':
                # Find result for this user's kingdom
                user_result = None
                for result in battle_results:
                    if result.get('attacker') == participation.kingdom:
                        user_result = result
                        break
                
                if user_result:
                    if user_result['result'] == 'victory':
                        result_text += "üéâ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–û–ë–ï–î–ê!\n"
                    elif user_result['result'] == 'defeat':
                        result_text += "‚ùå **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–æ—Ä–∞–∂–µ–Ω–∏–µ\n"
                    else:
                        result_text += "‚è∞ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –û–ø–æ–∑–¥–∞–Ω–∏–µ\n"
                else:
                    result_text += "‚ùì **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n"
            else:
                # Defender - check if defense held
                defending_kingdom = war.defending_kingdom
                total_damage = 0
                for result in battle_results:
                    total_damage += result.get('damage', 0)
                
                defense_hp = sum([war.get_defense_stats().get('hp', 0)])
                if total_damage >= defense_hp:
                    result_text += "‚ùå **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –û–±–æ—Ä–æ–Ω–∞ –ø—Ä–æ–±–∏—Ç–∞\n"
                else:
                    result_text += "üõ°Ô∏è **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –£—Å–ø–µ—à–Ω–∞—è –æ–±–æ—Ä–æ–Ω–∞!\n"
        else:
            result_text += "üïäÔ∏è **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ù–∏–∫—Ç–æ –Ω–µ –∞—Ç–∞–∫–æ–≤–∞–ª\n"
        
        # Personal rewards/losses
        if participation.money_gained > 0:
            result_text += f"üí∞ **–ü–æ–ª—É—á–µ–Ω–æ –∑–æ–ª–æ—Ç–∞:** +{participation.money_gained}\n"
        elif participation.money_lost > 0:
            result_text += f"üí∏ **–ü–æ—Ç–µ—Ä—è–Ω–æ –∑–æ–ª–æ—Ç–∞:** -{participation.money_lost}\n"
        
        if participation.exp_gained > 0:
            result_text += f"‚≠ê **–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞:** +{participation.exp_gained}\n"
        
        # Player stats at time of war
        player_stats = participation.get_player_stats()
        if player_stats:
            result_text += (
                f"\n**–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –≤–æ–π–Ω–µ:**\n"
                f"üí™ –°–∏–ª–∞: {player_stats.get('strength', 0)}\n"
                f"üõ°Ô∏è –ë—Ä–æ–Ω—è: {player_stats.get('armor', 0)}\n"
                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player_stats.get('hp', 0)}\n"
                f"‚ö° –õ–æ–≤–∫–æ—Å—Ç—å: {player_stats.get('agility', 0)}\n"
                f"üîÆ –ú–∞–Ω–∞: {player_stats.get('mana', 0)}"
            )
        
        await message.reply(
            result_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè∞ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ –±–∏—Ç–≤—ã", callback_data="kingdom_wars")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )