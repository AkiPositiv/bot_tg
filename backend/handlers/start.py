from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.user_service import UserService
from keyboards.main_menu import main_menu_keyboard, kingdom_selection_keyboard, gender_selection_keyboard
from config.settings import GameConstants
import re

router = Router()

class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_gender = State()
    waiting_for_kingdom = State()
    confirmation = State()

@router.message(Command("start"))
async def cmd_start(message: Message, user, is_registered: bool):
    """Handle /start command"""
    if is_registered:
        await message.answer(
            f"üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, <b>{user.name}</b>!\n\n"
            f"üë§ –£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: {user.money}\n"
            f"‚ö° –û–ø—ã—Ç: {user.experience}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
    else:
        await message.answer(
            "üè∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RPG –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞!</b>\n\n"
            "üéØ –í —ç—Ç–æ–π –∏–≥—Ä–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚öîÔ∏è –°—Ä–∞–∂–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n"
            "üè∞ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–æ–¥–∑–µ–º–µ–ª—å—è\n"
            "üí™ –†–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
            "üõí –ü–æ–∫—É–ø–∞—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ\n"
            "üèÜ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="register")]
            ])
        )

@router.callback_query(F.data == "register")
async def start_registration(callback: CallbackQuery, state: FSMContext, is_registered: bool):
    """Start registration process"""
    if is_registered:
        await callback.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    await state.set_state(RegistrationStates.waiting_for_name)
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:\n"
        "‚Ä¢ –û—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã _ -\n"
        "‚Ä¢ –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤"
    )
    await callback.answer()

@router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_name(message: Message, state: FSMContext):
    """Process character name"""
    name = message.text.strip()
    
    # Validate name
    if len(name) < 3:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    if len(name) > 20:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø0-9_-]+$', name):
        await message.answer("‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
        return
    
    # Save name and move to gender selection
    await state.update_data(name=name)
    await state.set_state(RegistrationStates.waiting_for_gender)
    
    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ò–º—è <b>{name}</b> –ø—Ä–∏–Ω—è—Ç–æ.\n\n"
        "üë§ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        reply_markup=gender_selection_keyboard()
    )

@router.callback_query(StateFilter(RegistrationStates.waiting_for_gender))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """Process gender selection"""
    gender = callback.data.replace("gender_", "")
    
    if gender not in ["male", "female"]:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        return
    
    # Save gender and move to kingdom selection
    await state.update_data(gender=gender)
    await state.set_state(RegistrationStates.waiting_for_kingdom)
    
    gender_text = "üë® –ú—É–∂—Å–∫–æ–π" if gender == "male" else "üë© –ñ–µ–Ω—Å–∫–∏–π"
    
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª: <b>{gender_text}</b>\n\n"
        "üè∞ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ:\n\n"
        "‚ùÑÔ∏è <b>–°–µ–≤–µ—Ä–Ω–æ–µ</b> - —Å–∏–ª–∞ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å\n"
        "üåÖ <b>–ó–∞–ø–∞–¥–Ω–æ–µ</b> - –º—É–¥—Ä–æ—Å—Ç—å –∏ –º–∞–≥–∏—è\n"
        "üå∏ <b>–í–æ—Å—Ç–æ—á–Ω–æ–µ</b> - —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –ª–æ–≤–∫–æ—Å—Ç—å\n"
        "üî• <b>–Æ–∂–Ω–æ–µ</b> - —Å—Ç—Ä–∞—Å—Ç—å –∏ –±–æ–µ–≤–∞—è —è—Ä–æ—Å—Ç—å",
        reply_markup=kingdom_selection_keyboard()
    )
    await callback.answer()

@router.callback_query(StateFilter(RegistrationStates.waiting_for_kingdom))
async def process_kingdom(callback: CallbackQuery, state: FSMContext):
    """Process kingdom selection"""
    kingdom = callback.data.replace("kingdom_", "")
    
    if kingdom not in ["north", "west", "east", "south"]:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        return
    
    # Save kingdom and show confirmation
    await state.update_data(kingdom=kingdom)
    await state.set_state(RegistrationStates.confirmation)
    
    data = await state.get_data()
    kingdom_info = GameConstants.KINGDOMS[kingdom]
    gender_text = "üë® –ú—É–∂—Å–∫–æ–π" if data['gender'] == "male" else "üë© –ñ–µ–Ω—Å–∫–∏–π"
    
    confirmation_text = (
        "üéØ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        f"üìù –ò–º—è: <b>{data['name']}</b>\n"
        f"üë§ –ü–æ–ª: <b>{gender_text}</b>\n"
        f"üè∞ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: <b>{kingdom_info['emoji']} {kingdom_info['name']}</b>\n\n"
        f"üí™ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        f"‚öîÔ∏è –°–∏–ª–∞: 10\n"
        f"üõ°Ô∏è –ë—Ä–æ–Ω—è: 10\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: 100\n"
        f"üí® –ü—Ä–æ–≤–æ—Ä–Ω–æ—Å—Ç—å: 10\n"
        f"üîÆ –ú–∞–Ω–∞: 50\n\n"
        f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–µ–Ω—å–≥–∏: 100 –∑–æ–ª–æ—Ç–∞\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="confirm_registration")],
        [InlineKeyboardButton(text="‚ùå –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="register")]
    ])
    
    await callback.message.edit_text(confirmation_text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(StateFilter(RegistrationStates.confirmation), F.data == "confirm_registration")
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    """Confirm and create character"""
    data = await state.get_data()
    user_service = UserService()
    
    try:
        # Create user
        user = await user_service.create_user(
            telegram_id=callback.from_user.id,
            name=data['name'],
            gender=data['gender'],
            kingdom=data['kingdom']
        )
        
        await state.clear()
        
        kingdom_info = GameConstants.KINGDOMS[data['kingdom']]
        
        await callback.message.edit_text(
            f"üéâ <b>–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä RPG, <b>{user.name}</b>!\n"
            f"–í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å {kingdom_info['emoji']} <b>{kingdom_info['name']}</b>\n\n"
            f"üéÆ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–≤–æ—ë –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!",
            reply_markup=main_menu_keyboard()
        )
        
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="register")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery, user, is_registered: bool):
    """Show main menu"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    await callback.message.edit_text(
        f"üéÆ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"üë§ {user.name} | –£—Ä–æ–≤–µ–Ω—å {user.level}\n"
        f"üí∞ –î–µ–Ω—å–≥–∏: {user.money}\n"
        f"‚ö° –û–ø—ã—Ç: {user.experience}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()