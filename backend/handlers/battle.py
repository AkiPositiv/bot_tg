from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.main_menu import battle_menu_keyboard, kingdom_attack_keyboard, battle_accept_keyboard
from services.battle_service import BattleService
from services.user_service import UserService
from config.settings import GameConstants
from sqlalchemy import select
from config.database import AsyncSessionLocal
from models.user import User
import random

router = Router()

@router.callback_query(F.data == "battle_menu")
async def show_battle_menu(callback: CallbackQuery, user, is_registered: bool):
    """Show battle menu"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    await callback.message.edit_text(
        f"‚öîÔ∏è <b>–ú–µ–Ω—é —Å—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
        f"üë§ {user.name} | –£—Ä–æ–≤–µ–Ω—å {user.level}\n"
        f"üí™ –°–∏–ª–∞: {user.strength} | üõ°Ô∏è –ë—Ä–æ–Ω—è: {user.armor}\n"
        f"‚ù§Ô∏è HP: {user.current_hp}/{user.hp} | üîÆ –ú–∞–Ω–∞: {user.current_mana}/{user.mana}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=battle_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "kingdom_attack")
async def show_kingdom_attack(callback: CallbackQuery, user, is_registered: bool):
    """Show kingdom attack menu"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    kingdom_info = GameConstants.KINGDOMS[user.kingdom.value]
    
    await callback.message.edit_text(
        f"üè∞ <b>–ê—Ç–∞–∫–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞</b>\n\n"
        f"–í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å {kingdom_info['emoji']} <b>{kingdom_info['name']}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –¥–ª—è –∞—Ç–∞–∫–∏:\n"
        f"(–ò–≥—Ä–æ–∫–∏ –≤–∞—à–µ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è)",
        reply_markup=kingdom_attack_keyboard(user.kingdom.value)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("attack_"))
async def attack_kingdom(callback: CallbackQuery, user, is_registered: bool):
    """Show players from target kingdom"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    target_kingdom = callback.data.replace("attack_", "")
    kingdom_info = GameConstants.KINGDOMS[target_kingdom]
    
    # Get online players from target kingdom (level range ¬±5)
    async with AsyncSessionLocal() as session:
        min_level = max(1, user.level - 5)
        max_level = user.level + 5
        
        result = await session.execute(
            select(User).where(
                User.kingdom == target_kingdom,
                User.level >= min_level,
                User.level <= max_level,
                User.id != user.id,
                User.is_active == True
            ).limit(10)
        )
        players = result.scalars().all()
    
    if not players:
        await callback.answer(
            f"–í {kingdom_info['name']} –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤!\n"
            f"–ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤ —É—Ä–æ–≤–Ω—è {min_level}-{max_level}",
            show_alert=True
        )
        return
    
    # Create player selection keyboard
    builder = InlineKeyboardBuilder()
    for player in players:
        player_text = f"‚öîÔ∏è {player.name} | –£—Ä.{player.level}"
        builder.row(InlineKeyboardButton(
            text=player_text,
            callback_data=f"challenge_{player.id}"
        ))
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="kingdom_attack"))
    
    await callback.message.edit_text(
        f"üè∞ <b>–ò–≥—Ä–æ–∫–∏ {kingdom_info['emoji']} {kingdom_info['name']}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–∞ –±–æ–π:\n"
        f"(–ü–æ–∫–∞–∑–∞–Ω—ã –∏–≥—Ä–æ–∫–∏ —É—Ä–æ–≤–Ω—è {min_level}-{max_level})",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("challenge_"))
async def challenge_player(callback: CallbackQuery, user, is_registered: bool):
    """Challenge player to battle"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    defender_id = int(callback.data.replace("challenge_", ""))
    
    # Check if user has enough HP
    if user.current_hp < user.hp * 0.3:  # Need at least 30% HP
        await callback.answer(
            "‚ù§Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –±–æ—è!\n"
            "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 30% HP",
            show_alert=True
        )
        return
    
    # Get defender info
    async with AsyncSessionLocal() as session:
        defender = await session.get(User, defender_id)
        if not defender:
            await callback.answer("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
    
    # Create battle
    battle_service = BattleService()
    battle = await battle_service.create_pvp_battle(user.id, defender_id)
    
    # Notify challenger
    await callback.message.edit_text(
        f"‚öîÔ∏è <b>–í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
        f"–í—ã –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –±–æ–π <b>{defender.name}</b> (–£—Ä.{defender.level})\n"
        f"–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...\n\n"
        f"ID –±–∏—Ç–≤—ã: #{battle.id}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="battle_menu")]
        ])
    )
    
    # Here we would normally send notification to defender via bot
    # For now just show success message
    await callback.answer("‚úÖ –í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@router.callback_query(F.data == "pvp_battle")
async def show_pvp_battles(callback: CallbackQuery, user, is_registered: bool):
    """Show pending PvP battles for user"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    battle_service = BattleService()
    pending_battles = await battle_service.get_pending_battles(user.id)
    
    if not pending_battles:
        await callback.message.edit_text(
            f"‚öîÔ∏è <b>PvP –°—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
            f"–£ –≤–∞—Å –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –±–æ–π.\n\n"
            f"–ß—Ç–æ–±—ã —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å –∫–µ–º-—Ç–æ:\n"
            f"1. –í—ã–±–µ—Ä–∏—Ç–µ '–ê—Ç–∞–∫–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞'\n"
            f"2. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ\n"
            f"3. –í—ã–∑–æ–≤–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –±–æ–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè∞ –ê—Ç–∞–∫–∞ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞", callback_data="kingdom_attack")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="battle_menu")]
            ])
        )
        await callback.answer()
        return
    
    # Show pending battles
    builder = InlineKeyboardBuilder()
    
    for battle in pending_battles:
        # Get challenger info
        async with AsyncSessionLocal() as session:
            challenger = await session.get(User, battle.challenger_id)
        
        if challenger:
            builder.row(InlineKeyboardButton(
                text=f"‚öîÔ∏è {challenger.name} (–£—Ä.{challenger.level})",
                callback_data=f"view_battle_{battle.id}"
            ))
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="battle_menu"))
    
    await callback.message.edit_text(
        f"‚öîÔ∏è <b>–í—Ö–æ–¥—è—â–∏–µ –≤—ã–∑–æ–≤—ã</b>\n\n"
        f"–£ –≤–∞—Å {len(pending_battles)} –≤—Ö–æ–¥—è—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –±–æ–π:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("view_battle_"))
async def view_battle_challenge(callback: CallbackQuery, user, is_registered: bool):
    """View battle challenge details"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    battle_id = int(callback.data.replace("view_battle_", ""))
    battle_service = BattleService()
    battle = await battle_service.get_battle(battle_id)
    
    if not battle or battle.defender_id != user.id:
        await callback.answer("–ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # Get challenger info
    async with AsyncSessionLocal() as session:
        challenger = await session.get(User, battle.challenger_id)
    
    if not challenger:
        await callback.answer("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    kingdom_info = GameConstants.KINGDOMS[challenger.kingdom.value]
    
    battle_text = (
        f"‚öîÔ∏è <b>–í—ã–∑–æ–≤ –Ω–∞ –±–æ–π</b>\n\n"
        f"üéØ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: <b>{challenger.name}</b>\n"
        f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>{challenger.level}</b>\n"
        f"üè∞ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ: <b>{kingdom_info['emoji']} {kingdom_info['name']}</b>\n\n"
        
        f"üí™ <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</b>\n"
        f"‚öîÔ∏è –°–∏–ª–∞: <b>{challenger.strength}</b>\n"
        f"üõ°Ô∏è –ë—Ä–æ–Ω—è: <b>{challenger.armor}</b>\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <b>{challenger.hp}</b>\n"
        f"üí® –ü—Ä–æ–≤–æ—Ä–Ω–æ—Å—Ç—å: <b>{challenger.agility}</b>\n\n"
        
        f"üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {challenger.pvp_wins}W/{challenger.pvp_losses}L\n\n"
        f"–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?"
    )
    
    await callback.message.edit_text(
        battle_text,
        reply_markup=battle_accept_keyboard(battle_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("accept_battle_"))
async def accept_battle(callback: CallbackQuery, user, is_registered: bool):
    """Accept battle challenge"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    battle_id = int(callback.data.replace("accept_battle_", ""))
    
    # Check if user has enough HP
    if user.current_hp < user.hp * 0.3:  # Need at least 30% HP
        await callback.answer(
            "‚ù§Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –±–æ—è!\n"
            "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 30% HP",
            show_alert=True
        )
        return
    
    battle_service = BattleService()
    success = await battle_service.accept_battle(battle_id)
    
    if not success:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤!", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚öîÔ∏è <b>–ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
        f"‚è≥ –ò–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç –±–æ—è...\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n\n"
        f"ID –±–∏—Ç–≤—ã: #{battle_id}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data=f"check_result_{battle_id}")],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="battle_menu")]
        ])
    )
    await callback.answer("‚úÖ –ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

@router.callback_query(F.data.startswith("decline_battle_"))
async def decline_battle(callback: CallbackQuery, user, is_registered: bool):
    """Decline battle challenge"""
    battle_id = int(callback.data.replace("decline_battle_", ""))
    
    # Update battle status to cancelled
    # For now just show message
    await callback.message.edit_text(
        f"‚ùå <b>–í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω</b>\n\n"
        f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–∑–æ–≤ –Ω–∞ –±–æ–π.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pvp_battle")]
        ])
    )
    await callback.answer("–í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω!")

@router.callback_query(F.data.startswith("check_result_"))
async def check_battle_result(callback: CallbackQuery, user, is_registered: bool):
    """Check battle result"""
    battle_id = int(callback.data.replace("check_result_", ""))
    battle_service = BattleService()
    battle = await battle_service.get_battle(battle_id)
    
    if not battle:
        await callback.answer("–ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    if battle.status.value != "finished":
        await callback.answer("–ë–∏—Ç–≤–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=True)
        return
    
    # Get participants
    async with AsyncSessionLocal() as session:
        challenger = await session.get(User, battle.challenger_id)
        defender = await session.get(User, battle.defender_id)
        winner = await session.get(User, battle.winner_id)
    
    # Determine if user won
    user_won = (battle.winner_id == user.id)
    opponent = challenger if user.id == battle.defender_id else defender
    
    result_emoji = "üèÜ" if user_won else "üíÄ"
    result_text = "–ü–û–ë–ï–î–ê" if user_won else "–ü–û–†–ê–ñ–ï–ù–ò–ï"
    
    battle_text = (
        f"{result_emoji} <b>{result_text}!</b>\n\n"
        f"‚öîÔ∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã #{battle_id}</b>\n\n"
        f"üë§ –í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫: <b>{opponent.name}</b>\n"
        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner.name}</b>\n"
        f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{battle.total_turns} —Ö–æ–¥–æ–≤</b>\n\n"
    )
    
    if user_won:
        battle_text += (
            f"üéÅ <b>–ù–∞–≥—Ä–∞–¥—ã:</b>\n"
            f"‚ö° –û–ø—ã—Ç: <b>+{battle.exp_gained}</b>\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: <b>+{battle.money_gained}</b> –∑–æ–ª–æ—Ç–∞\n\n"
        )
    
    # Show some battle log highlights
    damage_log = battle.get_damage_log()
    if damage_log:
        battle_text += f"üìä <b>–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –±–æ—è:</b>\n"
        for i, log_entry in enumerate(damage_log[-3:]):  # Last 3 actions
            if log_entry['result'] == 'critical':
                battle_text += f"üí• {log_entry['attacker']}: –ö—Ä–∏—Ç! {log_entry['damage']} —É—Ä–æ–Ω–∞\n"
            elif log_entry['result'] == 'dodged':
                battle_text += f"üí® –£–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∞—Ç–∞–∫–∏ {log_entry['attacker']}\n"
    
    await callback.message.edit_text(
        battle_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –±–∏—Ç–≤", callback_data="battle_menu")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "battle_stats")
async def show_battle_stats(callback: CallbackQuery, user, is_registered: bool):
    """Show battle statistics"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    total_battles = user.pvp_wins + user.pvp_losses
    winrate = (user.pvp_wins / total_battles * 100) if total_battles > 0 else 0
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
        f"üë§ –ò–≥—Ä–æ–∫: <b>{user.name}</b>\n"
        f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>{user.level}</b>\n\n"
        
        f"‚öîÔ∏è <b>PvP –±–∏—Ç–≤—ã:</b>\n"
        f"üèÜ –ü–æ–±–µ–¥—ã: <b>{user.pvp_wins}</b>\n"
        f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏—è: <b>{user.pvp_losses}</b>\n"
        f"üìä –í–∏–Ω—Ä–µ–π—Ç: <b>{winrate:.1f}%</b>\n\n"
        
        f"ü§ñ <b>PvE –±–∏—Ç–≤—ã:</b>\n"
        f"‚úÖ –ü–æ–±–µ–¥—ã: <b>{user.pve_wins}</b>\n\n"
        
        f"‚ö° <b>–£—Ä–æ–Ω:</b>\n"
        f"‚öîÔ∏è –ù–∞–Ω–µ—Å–µ–Ω–æ: <b>{user.total_damage_dealt}</b>\n"
        f"üõ°Ô∏è –ü–æ–ª—É—á–µ–Ω–æ: <b>{user.total_damage_received}</b>\n"
    )
    
    if total_battles > 0:
        avg_damage = user.total_damage_dealt // total_battles
        stats_text += f"üìà –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–Ω –∑–∞ –±–æ–π: <b>{avg_damage}</b>\n"
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="battle_menu")]
        ])
    )
    await callback.answer()

@router.callback_query(F.data == "training_battle")
async def show_training_options(callback: CallbackQuery, user, is_registered: bool):
    """Show training battle options"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    training_text = (
        f"ü§ñ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –±–æ–∏</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
        f"‚öîÔ∏è <b>–ë—ã—Å—Ç—Ä—ã–π –±–æ–π</b> - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ–π –ø—Ä–æ—Ç–∏–≤ –ò–ò\n"
        f"üéØ <b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π</b> - –ø–æ—à–∞–≥–æ–≤–∞—è –±–∏—Ç–≤–∞ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏–π\n\n"
        f"üí° –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏ –¥–∞—é—Ç –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öîÔ∏è –ë—ã—Å—Ç—Ä—ã–π –±–æ–π", callback_data="quick_training")],
        [InlineKeyboardButton(text="üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–æ–π", callback_data="pve_encounter")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="battle_menu")]
    ])
    
    await callback.message.edit_text(training_text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "quick_training")
async def training_battle(callback: CallbackQuery, user, is_registered: bool):
    """Training battle against AI"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    # Generate AI opponent with similar stats
    ai_level = max(1, user.level + random.randint(-2, 2))
    ai_strength = user.strength + random.randint(-3, 3)
    ai_armor = user.armor + random.randint(-3, 3)
    ai_hp = user.hp + random.randint(-20, 20)
    ai_agility = user.agility + random.randint(-3, 3)
    
    # Simple battle simulation
    user_damage = max(1, user.strength + user.agility // 2 - ai_armor // 2)
    ai_damage = max(1, ai_strength + ai_agility // 2 - user.armor // 2)
    
    user_hp = user.current_hp
    ai_hp_current = max(50, ai_hp)
    
    # Quick battle simulation
    turns = 0
    while user_hp > 0 and ai_hp_current > 0 and turns < 20:
        # User attacks
        if random.random() > 0.1:  # 90% hit chance
            damage = user_damage + random.randint(-2, 5)
            ai_hp_current -= damage
        
        if ai_hp_current <= 0:
            break
            
        # AI attacks
        if random.random() > 0.1:  # 90% hit chance
            damage = ai_damage + random.randint(-2, 5)
            user_hp -= damage
            
        turns += 1
    
    # Determine result
    if user_hp > 0:
        result = "üèÜ –ü–û–ë–ï–î–ê!"
        exp_reward = 20 + ai_level * 2
        money_reward = 10 + ai_level
        
        # Update user stats (simplified)
        user_service = UserService()
        await user_service.add_experience(user.id, exp_reward)
        await user_service.update_user(user.id, 
                                     money=user.money + money_reward,
                                     pve_wins=user.pve_wins + 1)
        
        result_text = (
            f"{result}\n\n"
            f"ü§ñ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: –ò–ò –ë–æ–µ—Ü (–£—Ä.{ai_level})\n"
            f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {turns} —Ö–æ–¥–æ–≤\n\n"
            f"üéÅ –ù–∞–≥—Ä–∞–¥—ã:\n"
            f"‚ö° –û–ø—ã—Ç: +{exp_reward}\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: +{money_reward} –∑–æ–ª–æ—Ç–∞"
        )
    else:
        result_text = (
            f"üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï!\n\n"
            f"ü§ñ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: –ò–ò –ë–æ–µ—Ü (–£—Ä.{ai_level})\n"
            f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {turns} —Ö–æ–¥–æ–≤\n\n"
            f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
    
    await callback.message.edit_text(
        f"ü§ñ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –±–æ–π</b>\n\n{result_text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ï—â—ë –±–æ–π", callback_data="training_battle")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="battle_menu")]
        ])
    )
    await callback.answer()

# Placeholder handlers for future features
@router.callback_query(F.data.in_(["dungeon_menu", "skills_menu", "events", "leaderboards"]))
async def placeholder_features(callback: CallbackQuery):
    """Placeholder for future features"""
    feature_names = {
        "dungeon_menu": "–ü–æ–¥–∑–µ–º–µ–ª—å—è",
        "skills_menu": "–ù–∞–≤—ã–∫–∏", 
        "events": "–°–æ–±—ã—Ç–∏—è",
        "leaderboards": "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"
    }
    
    feature_name = feature_names.get(callback.data, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è")
    await callback.answer(f"{feature_name} –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!", show_alert=True)

@router.callback_query(F.data == "inventory")
async def inventory_from_battle(callback: CallbackQuery, user, is_registered: bool):
    """Redirect to inventory from battle menu"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    # Import and use inventory handler
    from handlers.inventory import show_inventory
    await show_inventory(callback, user, is_registered)

@router.callback_query(F.data == "shop_menu")
async def shop_menu_from_battle(callback: CallbackQuery, user, is_registered: bool):
    """Redirect to shop menu from battle menu"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    # Import and use shop handler
    from handlers.shop import show_shop_menu
    await show_shop_menu(callback, user, is_registered)