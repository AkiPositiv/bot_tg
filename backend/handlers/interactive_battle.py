from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.interactive_battle_service import InteractiveBattleService
from models.interactive_battle import BattlePhaseEnum
import asyncio

router = Router()

@router.callback_query(F.data == "pve_encounter")
async def start_pve_encounter(callback: CallbackQuery, user, is_registered: bool):
    """Start PvE encounter"""
    if not is_registered:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    
    # Check if user has enough HP
    if user.current_hp < user.hp * 0.3:
        await callback.answer("‚ù§Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –±–æ—è! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 30% HP", show_alert=True)
        return
    
    battle_service = InteractiveBattleService()
    battle = await battle_service.start_pve_encounter(user.id)
    
    if not battle:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!", show_alert=True)
        return
    
    monster_data = battle.get_monster_data()
    
    # Create monster card
    monster_card = (
        f"üéØ <b>–í—Å—Ç—Ä–µ—á–∞ —Å –º–æ–Ω—Å—Ç—Ä–æ–º!</b>\n\n"
        f"{monster_data['type_emoji']} <b>{monster_data['name']}</b>\n"
        f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: <b>{monster_data['level']}</b>\n"
        f"{monster_data['difficulty_color']} –°–ª–æ–∂–Ω–æ—Å—Ç—å: <b>{monster_data['type_emoji']}</b>\n\n"
        
        f"üìä <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞:</b>\n"
        f"‚öîÔ∏è –°–∏–ª–∞: <b>{monster_data['strength']}</b>\n"
        f"üõ°Ô∏è –ë—Ä–æ–Ω—è: <b>{monster_data['armor']}</b>\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <b>{monster_data['hp']}</b>\n"
        f"üí® –ü—Ä–æ–≤–æ—Ä–Ω–æ—Å—Ç—å: <b>{monster_data['agility']}</b>\n\n"
        
        f"üéÅ <b>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–±–µ–¥—É:</b>\n"
        f"‚ö° –û–ø—ã—Ç: <b>+{monster_data['exp_reward']}</b>\n"
        f"üí∞ –î–µ–Ω—å–≥–∏: <b>+{monster_data['money_reward']}</b> –∑–æ–ª–æ—Ç–∞\n\n"
        
        f"üë§ <b>–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
        f"‚ù§Ô∏è HP: <b>{user.current_hp}/{user.hp}</b>\n"
        f"üîÆ –ú–∞–Ω–∞: <b>{user.current_mana}/{user.mana}</b>\n\n"
        
        f"–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öîÔ∏è –°—Ä–∞–∂–∞—Ç—å—Å—è!", callback_data=f"accept_pve_{battle.id}")],
        [InlineKeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –°–±–µ–∂–∞—Ç—å", callback_data=f"flee_pve_{battle.id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="battle_menu")]
    ])
    
    await callback.message.edit_text(monster_card, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("accept_pve_"))
async def accept_pve_battle(callback: CallbackQuery, user, is_registered: bool):
    """Accept PvE battle"""
    battle_id = int(callback.data.replace("accept_pve_", ""))
    
    battle_service = InteractiveBattleService()
    success = await battle_service.accept_pve_battle(battle_id)
    
    if not success:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –±–æ–π!", show_alert=True)
        return
    
    await show_attack_selection(callback, battle_id, user)

@router.callback_query(F.data.startswith("flee_pve_"))
async def flee_pve_battle(callback: CallbackQuery, user, is_registered: bool):
    """Flee from PvE battle"""
    battle_id = int(callback.data.replace("flee_pve_", ""))
    
    battle_service = InteractiveBattleService()
    success = await battle_service.flee_from_battle(battle_id, user.id)
    
    if success:
        await callback.message.edit_text(
            "üèÉ‚Äç‚ôÇÔ∏è <b>–í—ã —Å–±–µ–∂–∞–ª–∏ —Å –ø–æ–ª—è –±–æ—è!</b>\n\n"
            "–ò–Ω–æ–≥–¥–∞ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ - –ª—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è.\n"
            "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∏–ª—å–Ω–µ–µ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –±–∏—Ç–≤", callback_data="battle_menu")]
            ])
        )
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å!", show_alert=True)
    
    await callback.answer()

async def show_attack_selection(callback: CallbackQuery, battle_id: int, user):
    """Show attack direction selection"""
    battle_service = InteractiveBattleService()
    battle = await battle_service.get_battle(battle_id)
    
    if not battle:
        return
    
    monster_data = battle.get_monster_data()
    
    attack_text = (
        f"‚öîÔ∏è <b>–†–∞—É–Ω–¥ {battle.current_round}</b>\n\n"
        f"üë§ <b>–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
        f"‚ù§Ô∏è HP: <b>{battle.player1_hp}/{user.hp}</b>\n"
        f"üîÆ –ú–∞–Ω–∞: <b>{battle.player1_mana}/{user.mana}</b>\n\n"
        
        f"{monster_data['type_emoji']} <b>{monster_data['name']}:</b>\n"
        f"‚ù§Ô∏è HP: <b>{battle.monster_hp}/{monster_data['hp']}</b>\n\n"
        
        f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ç–∞–∫–∏:</b>\n"
        f"–ú–æ–Ω—Å—Ç—Ä –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è —É–∫–ª–æ–Ω–∏—Ç—å—Å—è –≤ –æ–¥–Ω—É –∏–∑ —Å—Ç–æ—Ä–æ–Ω.\n"
        f"–£–≥–∞–¥–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è!\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ –≤—ã–±–æ—Ä: <b>50 —Å–µ–∫—É–Ω–¥</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –õ–µ–≤–∞—è", callback_data=f"attack_left_{battle_id}"),
            InlineKeyboardButton(text="üéØ –¶–µ–Ω—Ç—Ä", callback_data=f"attack_center_{battle_id}"),
            InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–∞–≤–∞—è", callback_data=f"attack_right_{battle_id}")
        ]
    ])
    
    await callback.message.edit_text(attack_text, reply_markup=keyboard)
    
    # Start timeout checker
    asyncio.create_task(check_round_timeout(battle_id, 50))

@router.callback_query(F.data.startswith("attack_"))
async def handle_attack_choice(callback: CallbackQuery, user, is_registered: bool):
    """Handle attack direction choice"""
    parts = callback.data.split("_")
    direction = parts[1]
    battle_id = int(parts[2])
    
    battle_service = InteractiveBattleService()
    success = await battle_service.make_attack_choice(battle_id, user.id, direction)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞—Ç–∞–∫–∏!", show_alert=True)
        return
    
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∞—Ç–∞–∫–∞: {direction}")
    await show_dodge_selection(callback, battle_id, user)

async def show_dodge_selection(callback: CallbackQuery, battle_id: int, user):
    """Show dodge direction selection"""
    battle_service = InteractiveBattleService()
    battle = await battle_service.get_battle(battle_id)
    
    if not battle:
        return
    
    monster_data = battle.get_monster_data()
    
    dodge_text = (
        f"üõ°Ô∏è <b>–†–∞—É–Ω–¥ {battle.current_round} - –£–∫–ª–æ–Ω–µ–Ω–∏–µ</b>\n\n"
        f"üë§ <b>–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
        f"‚ù§Ô∏è HP: <b>{battle.player1_hp}/{user.hp}</b>\n\n"
        
        f"{monster_data['type_emoji']} <b>{monster_data['name']}:</b>\n"
        f"‚ù§Ô∏è HP: <b>{battle.monster_hp}/{monster_data['hp']}</b>\n\n"
        
        f"üõ°Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∫–ª–æ–Ω–µ–Ω–∏—è:</b>\n"
        f"–ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç! –£–∫–ª–æ–Ω–∏—Ç–µ—Å—å –≤ –Ω—É–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É,\n"
        f"—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ä–æ–Ω–∞.\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ –≤—ã–±–æ—Ä: <b>50 —Å–µ–∫—É–Ω–¥</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–ª–µ–≤–æ", callback_data=f"dodge_left_{battle_id}"),
            InlineKeyboardButton(text="üõ°Ô∏è –ë–ª–æ–∫", callback_data=f"dodge_center_{battle_id}"),
            InlineKeyboardButton(text="‚û°Ô∏è –í–ø—Ä–∞–≤–æ", callback_data=f"dodge_right_{battle_id}")
        ]
    ])
    
    await callback.message.edit_text(dodge_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("dodge_"))
async def handle_dodge_choice(callback: CallbackQuery, user, is_registered: bool):
    """Handle dodge direction choice"""
    parts = callback.data.split("_")
    direction = parts[1]
    battle_id = int(parts[2])
    
    battle_service = InteractiveBattleService()
    success = await battle_service.make_dodge_choice(battle_id, user.id, direction)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–∫–ª–æ–Ω–µ–Ω–∏—è!", show_alert=True)
        return
    
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —É–∫–ª–æ–Ω–µ–Ω–∏–µ: {direction}")
    
    # Show calculating message
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–†–∞—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—É–Ω–¥–∞...</b>\n\n"
        f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π...",
        reply_markup=None
    )
    
    # Wait a bit for dramatic effect
    await asyncio.sleep(2)
    
    # Show round results
    await show_round_results(callback, battle_id, user)

async def show_round_results(callback: CallbackQuery, battle_id: int, user):
    """Show results of the round"""
    battle_service = InteractiveBattleService()
    battle = await battle_service.get_battle(battle_id)
    
    if not battle:
        return
    
    battle_log = battle.get_battle_log()
    if not battle_log:
        return
    
    last_round = battle_log[-1]
    
    # Build results text
    results_text = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞ {last_round['round']}</b>\n\n"
    
    results_text += f"üéØ <b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
    results_text += f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {last_round['player_attack']}\n"
    results_text += f"üõ°Ô∏è –£–∫–ª–æ–Ω–µ–Ω–∏–µ: {last_round['player_dodge']}\n\n"
    
    results_text += f"üëπ <b>–î–µ–π—Å—Ç–≤–∏—è –º–æ–Ω—Å—Ç—Ä–∞:</b>\n"
    results_text += f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {last_round['monster_attack']}\n"
    results_text += f"üõ°Ô∏è –£–∫–ª–æ–Ω–µ–Ω–∏–µ: {last_round['monster_dodge']}\n\n"
    
    results_text += f"üìã <b>–°–æ–±—ã—Ç–∏—è —Ä–∞—É–Ω–¥–∞:</b>\n"
    for event in last_round['events']:
        results_text += f"‚Ä¢ {event}\n"
    
    # Check battle status
    if battle.phase.value == "finished":
        await show_battle_finished(callback, battle, user)
        return
    
    # Continue to next round
    results_text += f"\n‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—É–Ω–¥—É {battle.current_round}..."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öîÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–æ–π", callback_data=f"continue_battle_{battle_id}")]
    ])
    
    await callback.message.edit_text(results_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("continue_battle_"))
async def continue_battle(callback: CallbackQuery, user, is_registered: bool):
    """Continue to next round"""
    battle_id = int(callback.data.replace("continue_battle_", ""))
    await show_attack_selection(callback, battle_id, user)

async def show_battle_finished(callback: CallbackQuery, battle, user):
    """Show battle finished results"""
    battle_log = battle.get_battle_log()
    final_result = battle_log[-1] if battle_log else {}
    
    if battle.winner_id == user.id:
        # Victory
        result_text = (
            f"üèÜ <b>–ü–û–ë–ï–î–ê!</b>\n\n"
            f"üéâ –í—ã –æ–¥–µ—Ä–∂–∞–ª–∏ –ø–æ–±–µ–¥—É –≤ –±–æ—é!\n\n"
            f"üéÅ <b>–ù–∞–≥—Ä–∞–¥—ã:</b>\n"
            f"‚ö° –û–ø—ã—Ç: <b>+{battle.exp_gained}</b>\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: <b>+{battle.money_gained}</b> –∑–æ–ª–æ—Ç–∞\n\n"
            f"üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å—Ä–∞–∂–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ!"
        )
        result_emoji = "üèÜ"
    else:
        # Defeat or flee
        result_type = final_result.get('result', 'defeat')
        if result_type == 'timeout':
            result_text = (
                f"‚è∞ <b>–í–†–ï–ú–Ø –í–´–®–õ–û!</b>\n\n"
                f"–ë–æ–π –∑–∞—Ç—è–Ω—É–ª—Å—è, –∏ –º–æ–Ω—Å—Ç—Ä —Å–±–µ–∂–∞–ª.\n"
                f"–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥—å—Ç–µ –±—ã—Å—Ç—Ä–µ–µ!"
            )
        else:
            result_text = (
                f"üíÄ <b>–ü–û–†–ê–ñ–ï–ù–ò–ï!</b>\n\n"
                f"–í—ã –ø–æ—Ç–µ—Ä–ø–µ–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–æ—é.\n"
                f"–ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü—Ä–æ–∫–∞—á–∞–π—Ç–µ—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!"
            )
        result_emoji = "üíÄ"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –±–æ–π", callback_data="pve_encounter")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="battle_menu")]
    ])
    
    await callback.message.edit_text(result_text, reply_markup=keyboard)

async def check_round_timeout(battle_id: int, timeout_seconds: int):
    """Check for round timeout"""
    await asyncio.sleep(timeout_seconds)
    
    battle_service = InteractiveBattleService()
    timed_out = await battle_service.check_battle_timeout(battle_id)
    
    if timed_out:
        # Battle timed out - would need to notify players
        # This is simplified for now
        pass